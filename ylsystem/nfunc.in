/*****************************************************************************
 *    Copyright (C) 2010 Younghyung Cho. <yhcting77@gmail.com>
 *    
 *    This file is part of YLISP.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as
 *    published by the Free Software Foundation either version 3 of the 
 *    License, or (at your option) any later version.
 *    
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License 
 *    (<http://www.gnu.org/licenses/lgpl.html>) for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/



NFUNC(shell,         "system.shell",        YLANfunc,
    "system.shell <command> : [Symbol]\n"
    "    -execute command in the shell by '/bin/bash -c')\n"
    "    @return : values of standard output and error\n")

NFUNC(sleep,         "system.sleep",        YLANfunc,
    "system.sleep <seconds> : [t]\n"
    "    -sleep for <secconds>\n");

NFUNC(usleep,        "system.usleep",       YLANfunc,
    "system.usleep <micro seconds> : [t]\n")

NFUNC(getenv,        "system.getenv",       YLANfunc,
    "system.getenv <variable> : [Symbol/nil]\n"
    "    -get value of environment variable. If there is no matching variable, it returns nil\n"
    "    @variable [Symbol]:\n")

NFUNC(setenv,        "system.setenv",       YLANfunc,
    "system.getenv <variable> <value> : [t/nil]\n"
    "    -set environment variable. If there is no matching variable, it returns nil\n"
    "    @variable, value [Symbol]:\n")

NFUNC(chdir,         "system.chdir",        YLANfunc,
    "system.chdir <path> : [t/nil]\n"
    "    -change current working directory.\n"
    "    @return: nil if fails. Otherwise not nil\n")

NFUNC(getcwd,        "system.getcwd",       YLANfunc,
    "system.getcwd : [Symbol]\n"
    "    -get current working directory path.\n")

NFUNC(fstat,         "system.fstat",        YLANfunc,
    "system.fstat [file] : [pair/nil]\n"
    "    -get paired map of file stat.\n"
    "    @return : nil if fails.\n"
    "        key: type\n"
    "            s : socket\n"
    "            l : symbolic link\n"
    "            f : regular file\n"
    "            b : block device\n"
    "            d : directory\n"
    "            c : character device\n"
    "            p : pipe\n"
    "            u : unknown\n"
    "        key: size\n"
    "            size of file.\n")

NFUNC(fread,         "system.fread",        YLANfunc,
    "system.fread <file path> : [Symbol/nil]\n"
    "    -read text file.\n"
    "    @file path[Symbol]:  file path\n"
    "    @return:             symbol atom if success. Otherwise nil is returned!\n"
    "    *ex\n"
    "        (fread 'test.txt) => <content of file>\n")

NFUNC(freadb,        "system.freadb",       YLANfunc,
    "system.freadb <file path> : [Binary/nil] - not tested yet\n"
    "    -read binary file.\n"
    "    @file path[Symbol]:  file path\n"
    "    @return:             binary atom if success. Otherwise nil is returned!\n"
    "    *ex\n"
    "        (freadb 'test.bin) => <content of file>\n")


NFUNC(fwrite,        "system.fwrite",       YLANfunc,
    "system.fwrite <file path> <exp> : [t/nil] - not tested yet\n"
    "    -write data(symbol or binary) to file.\n"
    "    @file path [Symbol]:      file path\n"
    "    @exp[Symbol | Binary]:   data to write \n"
    "    @return:                 t if success. Otherwise nil is returned!\n"
    "    *ex\n"
    "        (fwrite 'test.bin data) => <content of file>\n")

NFUNC(readdir,       "system.readdir",      YLANfunc,
    "system.readdir <dir path> : [list/nil]\n"
    "    -read directory.\n"
    "    @dir path [Symbol]: dir path\n"
    "    @return:            list of file names. nil if fails or there is no file in it.\n"
    "    *ex\n"
    "        (readdir '/usr) => <file names in the directory>\n")
