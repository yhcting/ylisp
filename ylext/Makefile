top="$(CURDIR)"/

VERSION=1.0

# Target name of dependency file generated by GCC, is just xxx.o
# So, we need post processing to handle it properly.
# To avoid this overhead... we don't use output directory.!
OUTDIR:=
DEPDIR:=.deps/
EXTLIB_DIR:=../lib/

EXT_LIBRARY:=ylisp
EXTLIB=$(addprefix $(EXTLIB_DIR),$(addsuffix .a,$(addprefix lib,$(EXT_LIBRARY))))

SOURCES= main.c nfunc_str.c nfunc_bin.c nfunc_arr.c nfunc_math.c nfunc_sys.c nfunc_trie.c nfunc_re.c
OBJ=$(subst .c,.o, $(addprefix $(OUTDIR),$(SOURCES)))
DEP_FILES=$(subst .c,.P, $(addprefix $(DEPDIR),$(SOURCES)))

TARGET=$(OUTDIR)ylext
LIB=$(OUTDIR)libylext.so

CC=gcc
CFLAGS+= -fPIC -Wall -g
LDFLAGS+= -rdynamic -ldl -lrt -lpthread -lm -L/usr/local/lib -lpcre
SOFLAGS+=
INCLUDES=-I../include
C_COMPILE=$(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
C_DEPENDENCIES=-Wp,-MD,$(DEPDIR)$(*F).P
C_LINK=$(CC) $(CFLAGS) $(LDFLAGS) -L.
SO_LINK=$(CC) $(SOFLAGS)

debug: $(TARGET)

release: $(LIB)

DEPS_MAGIC := $(shell mkdir $(DEPDIR) $(OUTDIR) > /dev/null 2>&1 || :)

# simply ignore file which doesn't exist. (At first these files don't exist..)
-include $(DEP_FILES)

$(OUTDIR)%.o: %.c
	@echo '$(C_COMPILE) -o $@ -c $<'; \
	$(C_COMPILE) $(C_DEPENDENCIES) -o $@ -c $<

# Is 'chmod' really only way to change mode of output so file?? Any elegant way????
$(LIB): $(OBJ)
	@echo '$(SO_LINK) $@ $^'; \
	$(SO_LINK) -shared -Wl,-soname,$@ -o $@ $^
	chmod 0644 $@
	cp $@ ../lib/

$(TARGET): $(OBJ) $(EXTLIB)
	@echo '$(C_LINK) -o $@ $^'; \
	$(C_LINK) -o  $@ $^

clean:
	rm -f *.mod *.o *.obj .lo $(TARGET) $(LIB)
	rm -rf $(DEPDIR)
	rm -rf $(OUTDIR)

# End of Makefile
