/*****************************************************************************
 *    Copyright (C) 2010 Younghyung Cho. <yhcting77@gmail.com>
 *    
 *    This file is part of YLISP.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as
 *    published by the Free Software Foundation either version 3 of the 
 *    License, or (at your option) any later version.
 *    
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License 
 *    (<http://www.gnu.org/licenses/lgpl.html>) for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/



NFUNC(length,                "string.length",               YLANfunc,
    "string.length <symbol> : [Double]\n"
    "    -return length of symbol\n"
    "    @symbol [Symbol]\n")

NFUNC(itos,                  "string.itos",                 YLANfunc,
    "string.itos <value> : [Symbol]\n"
    "    -convert interger part of double to symbol - fraction is ignored\n"
    "    @<value> [Double]\n"
    "    *ex\n"
    "        (string.itos 12.78); => 12\n")

NFUNC(dtos,                  "string.dtos",                 YLANfunc,
    "string.dtos <value> : [Symbol]\n"
    "    -convert double to symbol\n"
    "    @<value> [Double]\n"
    "    *ex\n"
    "        (string.dtos 12.78); => 12.78\n")

NFUNC(btos,                  "string.btos",                 YLANfunc,
    "string.btos <value> : [Symbol]\n"
    "    -convert binary to human-readable symbol\n"
    "    @<value> [Binary]\n"
    "    *ex\n"
    "        !Not Tested YET!\n")

NFUNC(split_to_line,         "string.split-to-line",        YLANfunc,
    "string.split-to-line <text> : <list exp>\n"
    "    -return symbol list. Each symbol contains one-line-string.\n"
    "     line-feed and carrage return are removed.\n"
    "    @text [Symbol]\n"
    "    @return        : list of symbols\n"
    "    *ex\n"
    "        (set 'r (string.split-to-line '\"1st line\\n2nd line\\n\"))\n"
    "        (print (car r));   => '1st line'\n"
    "        (print (cadr r));  => '2nd line'\n")

NFUNC(concat,                "string.concat",               YLANfunc,
    "string.concat <sym1> <sym2> ... : [Symbol]\n"
    "    -concatenate arguements.\n"
    "    *ex\n"
    "        (concat 'abc 'def 'gh) --> abcdefgh\n")

/*
NFUNC(at,                    "string.at",                   YLANfunc,
    "")

NFUNC(eq_ignore_case,        "string.eq-ignore-case",       YLANfunc,
    "")
*/