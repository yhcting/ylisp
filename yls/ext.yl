; =================================================
; EXT.YL
; =================================================

(defun fuzzy-equal (v1 v2 epsilon)
"fuzzy-equal <val1> <val2> <epsilon>
    -compare double value with epsilon.
     This can/should be used to compare fraction part of number
    @valN [Double]: value
    @epsilon [Double] : maximum allowable-errata.
"
    (let ((x 0))
        (set 'x (- v1 v2))
        (cond ((< x 0) (set 'x (* -1 x))))
        (> epsilon x)))

(defun equal-ignore-case (s1 s2)
"equal-ignore-case <str1> <str2> : [t/nil]
    -Compare strings, ignoring case considerations
"
    (equal (to-lower-case s1) (to-lower-case s2)))

(defun bsort (cmp L)
"bsort <cmp func> <list exp>
    -sort by using bubble sort alorithm (descending order)
     NOTE!: Passed list itself is changed! - sorted.
    @cmp func [Symbol]:   function used to compare.
                          function should be like '(<func> e1 e2)'.
                          This should return 'not nil' if 1st parameter is greater than 2nd parameter, otherwise nil.
    @list exp [list]:     list expression.
"
    (let ( (etmp '()) (I L) (J '()) )
        (while (not (null (cdr I)))
            (set 'J L)
            (while (not (null (cdr J)))
                (cond
                    ( (equal '() (cmp (car J) (cadr J)))
                        (progn
                            (set 'etmp (car J))
                            (setcar J (cadr J))
                            (setcar (cdr J) etmp))))
                (set 'J (cdr J)))
            (set 'I (cdr I)))
        L))

(defun pr? (PAIR key)
"pr? <pair> <key>
    -check whether <key> is in the pair or not.
     nil is returns if cannot be found. Otherwise <value> nil is returned.
"
    (cond ((null PAIR) '())
          ((equal key (caar PAIR)) 't)
          ('t (pr? (cdr PAIR) key))))

(defun pr- (PAIR key)
"pr- <pair> <key>
    -delete pair data whose key is <key>.
     If there is more than one, all are deleted.
    @return : updated pair.
"
    (cond ((null PAIR) '())
          ((equal key (caar PAIR))
              (pr- (cdr PAIR) key))
          ('t
              (cons (car PAIR) (pr- (cdr PAIR) key)))))

(defun pr+ (PAIR key value)
"pr+ <pair> <key> <value>
    -add pair data to the pair list at the first position.
     This returns original value if fail, otherwise newly updated pair.
    @pair: Pair --> ((x X)(y Y)...)
"
    (cond (   (equal PAIR '())
              (cons (list key value) '()))
          (   't
              (progn
                  (cond
                      (   (pr? PAIR key)
                          (append (cons (list key value) '()) (pr- PAIR key)))
                      (   't
                          (append (cons (list key value) '()) PAIR)))))))

(defun pr* (PAIR key)
"pr* <pair> <key>
    -find and get matching value.
     @return: nil if fails.
"
    (cond ((null PAIR) '())
          ((equal key (caar PAIR)) (cadar PAIR))
          ('t (pr* (cdr PAIR) key))))


(defun pr-from-list (P L V)
"pr-from-list <pair> <key-list> <value>
    -make and append initialized pair from key-list (reverse order)
"
    (cond
        (   (not (null L))
            (pr-from-list (pr+ P (car L) V) (cdr L) V) )
        ('t P)))


; two different implementations of defstruct
(mset defstruct
    (mlambda (name SLOTS)
        (let ( (rf '()) (unrf '()) )
            (defun rf (st S) ""
                (cond ((not (null S))
                    (progn
                        (f-mset (concat st '. (car S) '*)
                            (list 'mlambda '(inst) (list 'map* 'inst (list 'car (list 'quote S)))))
                        (f-mset (concat st '. (car S) '+)
                           (list 'mlambda '(inst val) (list 'map+ 'inst (list 'car (list 'quote S)) 'val)))
                        (rf st (cdr S))))))
            (f-mset (concat 'make- 'name)
                '(lambda () (make-trie-map (pr-from-list '() 'SLOTS ''()))))
            (rf 'name 'SLOTS)

            ; undef functions. (unset all auto-defined symbols...)
            (f-mset (concat 'undef- 'name)
                '(lambda ()
                    (let ( (l 'SLOTS) )
                        (unset (concat 'make- 'name))
                        (while (not (null l))
                            (unset (concat 'name '. (car l) '*))
                            (unset (concat 'name '. (car l) '+))
                            (set 'l (cdr l))))))    ))
"defstruct <name> <slots> ")

; ---
; Below 'defstruct' is implemented by using 'list'
; It's very good to understand and lisplike implementation.
; But, its slow for large structure...
; ---
;(mset defstruct
;    (mlambda (name SLOTS)
;        (let ( (rf '()) )
;            (defun rf (st S) ""
;                (cond ((not (null S))
;                    (progn
;                        (f-mset (concat st '. (car S) '*)
;                            (list 'mlambda '(inst) (list 'pr* 'inst (list 'car (list 'quote S)))))
;                        (f-mset (concat st '. (car S) '+)
;                            (list 'mlambda '(inst val) (list 'set ''inst (list 'pr+ 'inst (list 'car (list 'quote S)) 'val))))
;                        (rf st (cdr S))))))
;            (f-mset (concat 'make- 'name)
;                '(lambda () (pr-from-list '() 'SLOTS ''())))
;            (rf 'name 'SLOTS)))
;"defstruct <name> <slots> ")))


; ==============================
; We can use representative object to check type!
; ==============================
(set '.bintype (type (to-bin 't)))
(set '.arrtype (type (make-array 0)))
(set '.maptype (type (make-trie-map '())))

(defun arrtype? (e)
"is array type?\n"
    (equal (type e) .arrtype))

(defun maptype? (e)
"is map type?\n"
    (equal (type e) .maptype))

(defun bintype? (e)
"is binary type?\n"
    (equal (type e) .bintype))


;===================================================
;=                  System                         =
;===================================================
(defun fraw-rselect (fd time)
"fraw-rselect <fd> <time>
    -read select
"
(let ( (r '()) )
    (set 'r (fraw-select (cons fd '()) '() '() time))
    (cond ( (null r) '() )
        ('t (caar r)))))

(defun fraw-wselect (fd time)
"fraw-wselect <fd> <time>
    -write select
"
(let ( (r '()) )
    (set 'r (fraw-select '() (cons fd '()) '() time))
    (cond ( (null r) '() )
        ('t (cadar r)))))

(defun procia-read (pia to)
"procia-read <procia data> <timeout>
    -read subprocess's standard output and error stream.
    @timeout : timeout value (milliseconds)
    @return : nil if fails or timeout. otherwise string read.
"
(let ( (r '()) )
    (cond
        ((< 0 to) (progn
            (set 'r (fraw-rselect (procia-rfd pia) to))
            (cond
                ((null r) '())
                ('t (progn
                    (set 'r (fraw-read (procia-rfd pia)))
                    (cond
                        ((null r) '())
                        ('t (to-string r))))))))
        ('t (progn
            (set 'r (fraw-read (procia-rfd pia)))
            (cond
                ((null r) '())
                ('t (to-string r))))))))


(defun procia-write (pia in)
"procia-read <procia data> <data>
    -write to subprocess's standard input stream
    @in [Symbol]
"
    (fraw-write (procia-wfd pia) (to-bin in)))

;===================================================
;=             Integrated Interface                =
;===================================================
(defun length2 (e)
"length2 <exp>
    -Integrated version of length.
     This supports list, symbol, binary and returns
      list size, binary size, symbol length respectively.
"
    (case (type e)
        (.listtype (length e))
        (.symtype (strlen e))
        (.bintype (binlen e))
        (otherwise (assert '()))))
