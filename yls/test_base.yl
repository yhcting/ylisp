; Assumption : ylbase.so is loaded!
; test

; Test syntax parsor
(set 'x '\")
(assert (eq x '\"))
(set 'x (quote \"))
(assert (eq x '\"))


(set 'rrr 'ttt)
(assert 
    (eq rrr 'ttt))

(mset zzz rrr)
(assert
    (eq zzz 'ttt))

(mset rrr ttt)
(mset ttt (car (list yy '(x y))))
(mset yy (car '(ab cd)))

;special expansion of ylisp
(set 'gg1 'quote)
; ((eval 'gg1) haha) -> (quote haha) -> haha
(assert (eq 'haha ((eval 'gg1) haha)))
(set 'gg2 '(eval 'gg1))
(assert (eq 'haha ((eval 'gg2) haha)))



(assert
    (eq yy 'ab))
(assert
    (eq zzz 'ab))

(assert (equal '(x a b) '(x a b)))
(assert (equal '(x a) (cons 'x (cons 'a '()))))

(defmacro ee (x y) 
    "test macro"
    (car '(x y)))

(assert
    (equal '(a b)
        (ee (a b) (c d))))

(assert (eq 't (and (eq 8 8) (eq 7 7))))
(assert (eq '() (and (eq 1 2) (assert '()))))
(assert (eq 't (or (eq 1 1) (eq 2 4))))
(assert (eq '() (or (eq 1 2) (eq 1 3) (eq 2 3))))

(assert (eq '() (not (eq 1 1))))
(assert (eq 't (not (eq 1 2))))

(assert (equal
    '(a (x a) c)
    (subst '(x a) 'b '(a b c))))

(assert (equal
    '(a b c d e)
    (append '(a b) '(c d e))))

(assert (eq 't
    (among 'x '(a b x c d))))
(assert (eq '()
    (among 'x '(a b c d e))))

(assert (equal
    '((a x) (b (y z)) (c u))
    (pair '(a b c) '(x (y z) u))))

(set 'x '(1 2 3))
(assert (equal '(1 2 3) x))
(let ((x '(a b)) (y (list x '(l m))))
    (assert (equal '(a b) x))
    (assert (equal '((a b) (l m)) y))
    (set 'x (list x y))
    (assert (equal '((a b) ((a b) (l m))) x)))
(assert (equal '(1 2 3) x))

(let ((x 'a) (y 'b))
    (set 'y (list x y))
    (assert (equal '(a b) y)))

; test for nested let!
(let ((x 'a) (y 'b))
    (set 'x 'f)
    (set 't 'y)
    (let ((x 'c)(t 'z))
        (assert (eq x 'c))
        (assert (eq y 'b))
        (set 'x 'd)
        (assert (eq x 'd)))
    (assert (eq t 'y))
    (assert (eq x 'f)))
    
(assert (eq 't (> 2 1)))
(assert (= 't (> 2 1)))
(assert (= '() (< 2 1)))
(assert (= '() (< 1 1)))
(assert (= 't (> 'abc 'abb)))

(print '"\n
")

(print '"\n" x '"\n" '(1 2 3) '"\n")
(print 500 '"\n")
(printf '"%-20s --> %-10s : %-5s\n" '"this is test" '"OK?" 500)

(log '"v" '"this is verbose log" '"OK?\n")
(log '"d" '"this is dev log")

(assert (eq 'a (to-string 'a)))
(assert (eq '"(x y)" (to-string '(x y))))

(assert (eq 0x1 (& 0x1 0x3 0x7 0xf 0xff)))
(assert (eq 0xff (| 0x1 0x2 0x4 0x8 0x10 0x20 0x40 0x80)))
(assert (eq 0x3 (^ 0x1 0x2 0x4 0x8 0x4 0x8)))

(set 'i 0)
(set 's 0)
(while (< i 11) 
    (progn
        (set 's (+ s i))
        (set 'i (+ i 1))))
(assert (eq s 55))

(let ((i 0) (s 0))
    (while (< i 11)
        (set 's (+ s i))
        (set 'i (+ i 1)))
    (set 'sum s))
(assert (eq sum 55))

(let ((i 0) (s 0))
    (while (< i 11)
        (set 's (+ s i))
        (let ( (j 0) )
             (+ j i))
        (set 'i (+ i 1)))
    (set 'sum s))

(set 'i 3)
(while (> i 0)
    (let ((j 0))
        (print j))
    (set 'i (- i 1)))

(assert (eq 3 (% 7 4)))
(assert (eq 0 (% 3 3)))

(assert (eq '() (caar 'a)))
(assert (eq '() (caar '(a))))
(assert (eq 'a (caar '((a b) c))))
(assert (equal '(a) (caar '(((a) b) c))))

(assert (equal '(a b) (caaar '((((a b) c))))))

(set 'ttt '(x y (1 2)))
; yyy points same instance with ttt.
(set 'yyy ttt)
(setcar (cdr yyy) '(a b))
(assert (equal ttt '(x (a b) (1 2))))
(set 'ttt '(x y (1 2)))
(set 'yyy (clone ttt))
(setcar (cdr yyy) '(a b))
(assert (equal ttt '(x y (1 2))))
(assert (equal yyy '(x (a b) (1 2))))

(assert (eq 5 (min 5 9)))
(assert (eq 5 (max 5 4)))

(set 'f 1234)
(let ( (f '()) )
     (mset f +)
     (assert (eq 7 (f 3 4))))
(assert (eq 1234 f))


(let ( (f 0) )
    (++ f)
    (assert (eq 1 f))
    (++ f)
    (assert (eq 2 f)))

(let ( (f 4) )
    (-- f)
    (assert (eq 3 f))
    (-- f)
    (assert (eq 2 f)))


; test list handling
(set 'lst '(a b cd ef (1 2)))

(assert (eq 'a (first lst)))
(assert (equal '(b cd ef (1 2)) (rest lst)))

(assert (eq 5 (length lst)))
(assert (eq 0 (length '())))

(assert (eq 'a (nth 0 lst)))
(assert (eq 'cd (nth 2 lst)))
(assert (eq '() (nth -1 lst)))
(assert (eq '() (nth 100 lst)))
(assert (equal '(1 2) (nth 4 lst)))

(set 'lst '(0 1 2 3 4))
(assert (equal '(4) (last lst)))
(assert (equal '(4 3 2 1 0) (reverse lst)))
(assert (member '4 lst))
(assert (not (member '100 lst)))

(assert (eq 3 (1+ 2)))
(assert (not (eq 3 (1+ 1))))
(assert (eq 2 (1- 3)))
(assert (equal (list 2 3 4 5) (mapcar '1+ '(1 2 3 4))))
(assert (equal (list 't '() 't '()) (mapcar 'not '( '() 't '() 't))))

(unset 'rrr)
(unset 'yyy)
(unset 'ttt)
(unset 'zzz)
(unset 'yy)
(unset 'gg1)
(unset 'gg2)
(unset 'x)
(unset 'y)
(unset 'i)
(unset 's)
(unset 'lst)
