;===============================
; Naming Rule for Predefined Global Symbol!
;    .xxxx : starts with '.'
;===============================

; ==============================
; Define basic S-Functions!!!
; ==============================
(f-mset 'mset
    '(mlambda() (apply f-mset))
'"mset <symbol> <exp> (<desc>)
    -Special s-function. Macro version of 'set'. parameters are not evaluted!.
    Evaluating <symbol> is same with evaluating <exp>.
    @symbol[Symbol]: symbol name.
    @exp:            lisp expression.
    @desc[Symbol]:   description of this symbol.
    @return:         <exp>.
    *ex
        (mset a +) ;(a 7 8) => (+ 7 8)
        (mset zzz rrr)
        (mset rrr ttt)
        (mset ttt (car (list yy x y)))
        (mset yy (car '(ab cd)))
        ;(equal zzz 'ab) => t
")

(f-mset 'tmset
    '(mlambda() (apply f-tmset))
'"Per thread version of mset.\n")

; defun SHOULD use 'flabel'
; Why? See comments at 'flabel' part in sfunc.c of ylisp core.
(mset defun
    (mlambda (nAME aRG dESC bODY)
        (mset nAME
            (flabel nAME aRG bODY)
            dESC))
"defun <name> <args> <desc> <body>:
    -macro to define function.
    @name [Symbol]: function name.
    @args [list]:   argument list.
    @desc [Symbol]: description.
    @body [exp]:    function body
    *ex
        (defun caar (e)
            \"caar\"
            (cond ((or (atom e) (atom (car e))) '())
                ('t (car (car e)))))
        ; define 'caar' as function
")

(mset defmacro
    (mlambda (nAME aRG dESC bODY)
        (mset nAME
            (mlambda aRG bODY)
            dESC))
"defmacro <name> <args> <desc> <body>:
    -macro to define macro.
    @name [Symbol]: macro name.
    @args [list]:   argument list.
    @desc [Symbol]: description.
    @body [exp]:    macro body
    *ex
        (defmacro if (test tRUE)
            \"Traditional C-like if\"
            (cond (test tRUE)))
")

(mset cond
    (mlambda () (apply f-cond))
"cond <arg1> <arg2> ...
    -COND of S-Expression.
    @argN: (<cond> <exp>) form.
")

(mset and
    (mlambda () (apply f-and))
"and <exp1> <exp2> ...
    -eval [exp1] && eval [exp2] && ...
")

(mset or
    (mlambda () (apply f-or))
"or <exp1> <exp2> ...
    -eval [exp1] || eval [exp2] || ...
")

(mset let
    (mlambda () (apply f-let))
"let <vars> <exp1> <exp2> ...
    -let* in CL.
    @vars: form such that ((<var1> <init value>) (<var2> <init value>) ...).
           Each vars are locally defined symbol.
    @expN: expression to execute.
    *ex
        (set 'x 'a)
        (let ((x 'a))
            (set 'x 'f)
            (print 'x)); 'f' is printed
        (print 'x); 'a' is printed
")

(mset case
    (mlambda () (apply f-case))
"See f-case")

(mset while
    (mlambda () (apply f-while))
"while <cond_exp> <exp1> <exp2>
    -loop while eval [cond_exp] is not nil.
    *ex
        (set 'i 10)
        (while (< i 10)
            (print i)
            (set 'i (+ i 1)))
")

(defmacro if (test tRUE)
"if <cond> <exp-if-true>
    -Traditional C-like if.
"
    (cond (test tRUE)))

; ==============================
; We can use representative object to check type!
; ==============================
(set '.listtype (type '(a b)))
(set '.symtype (type 'a))
(set '.dbltype (type 1))
(set '.sfunctype (type quote))
(set '.nfunctype (type eval))

(defun symtype? (e)
"is symbol type?\n"
    (equal (type e) .symtype))

(defun dbltype? (e)
"is double type?\n"
    (equal (type e) .dbltype))

(defun sfunctype? (e)
"is sfunction type?\n"
    (equal (type e) .sfunctype))

(defun nfunctype? (e)
"is nfunction type?\n"
    (equal (type e) .nfunctype))

; ===========================
; = Define cx...r series - START
; ===========================
; ===========================
; = cxxr (4 funcs)
; ===========================
(defun caar (e)
"caar\n"
    (cond ((or (atom e) (atom (car e))) '())
        ('t (car (car e)))))

(defun cadr (e)
"cadr\n"
    (cond ((or (atom e) (atom (cdr e))) '())
        ('t (car (cdr e)))))

(defun cdar (e)
"cdar\n"
    (cond ((or (atom e) (atom (car e))) '())
        ('t (cdr (car e)))))

(defun cddr (e)
"cddr\n"
    (cond ((or (atom e) (atom (cdr e))) '())
        ('t (cdr (cdr e)))))

; ===========================
; = cxxxr (8 funcs)
; ===========================
(defun caaar (e)
"caaar\n"
    (cond ((atom (caar e)) '())
        ('t (car (caar e)))))

(defun caadr (e)
"caadr\n"
    (cond ((atom (cadr e)) '())
        ('t (car (cadr e)))))

(defun cadar (e)
"cadar\n"
    (cond ((atom (cdar e)) '())
        ('t (car (cdar e)))))

(defun caddr (e)
"caddr\n"
    (cond ((atom (cddr e)) '())
        ('t (car (cddr e)))))

(defun cdaar (e)
"cdaar\n"
    (cond ((atom (caar e)) '())
        ('t (cdr (caar e)))))

(defun cdadr (e)
"cdadr\n"
    (cond ((atom (cadr e)) '())
        ('t (cdr (cadr e)))))

(defun cddar (e)
"cddar\n"
    (cond ((atom (cdar e)) '())
        ('t (cdr (cdar e)))))

(defun cdddr (e)
"cdddr\n"
    (cond ((atom (cddr e)) '())
        ('t (cdr (cddr e)))))

; ===========================
; = cxxxxr (16 funcs)
; ===========================
; -----------------
; - caxxxr
; -----------------
(defun caaaar (e)
"caaaar\n"
    (cond ((atom (caaar e)) '())
        ('t (car (caaar e)))))

(defun caaadr (e)
"caaadr\n"
    (cond ((atom (caadr e)) '())
        ('t (car (caadr e)))))

(defun caadar (e)
"caadar\n"
    (cond ((atom (cadar e)) '())
        ('t (car (cadar e)))))

(defun caaddr (e)
"caaddr\n"
    (cond ((atom (caddr e)) '())
        ('t (car (caddr e)))))

(defun cadaar (e)
"cadaar\n"
    (cond ((atom (cdaar e)) '())
        ('t (car (cdaar e)))))

(defun cadadr (e)
"cadadr\n"
    (cond ((atom (cdadr e)) '())
        ('t (car (cdadr e)))))

(defun caddar (e)
"caddar\n"
    (cond ((atom (cddar e)) '())
        ('t (car (cddar e)))))

(defun cadddr (e)
"cadddr\n"
    (cond ((atom (cdddr e)) '())
        ('t (car (cdddr e)))))

; -----------------
; - cdxxxr
; -----------------
(defun cdaaar (e)
"cdaaar\n"
    (cond ((atom (caaar e)) '())
        ('t (cdr (caaar e)))))

(defun cdaadr (e)
"cdaadr\n"
    (cond ((atom (caadr e)) '())
        ('t (cdr (caadr e)))))

(defun cdadar (e)
"cdadar\n"
    (cond ((atom (cadar e)) '())
        ('t (cdr (cadar e)))))

(defun cdaddr (e)
"cdaddr\n"
    (cond ((atom (caddr e)) '())
        ('t (cdr (caddr e)))))

(defun cddaar (e)
"cddaar\n"
    (cond ((atom (cdaar e)) '())
        ('t (cdr (cdaar e)))))

(defun cddadr (e)
"cddadr\n"
    (cond ((atom (cdadr e)) '())
        ('t (cdr (cdadr e)))))

(defun cdddar (e)
"cdddar\n"
    (cond ((atom (cddar e)) '())
        ('t (cdr (cddar e)))))

(defun cddddr (e)
"cddddr\n"
    (cond ((atom (cdddr e)) '())
        ('t (cdr (cdddr e)))))

; ===========================
; = Define cx...r series - END
; ==========================

(defun not (e)
"not <exp> : [t/nil]
    -logical not
"
    (cond (e '()) ('t 't)))

; find fist-occurred-function-symbol.
; ff [x] = [atom [x] -> x; T -> ff [car [x]]]
(defun ff (e)
"ff <exp>
    -find fist-occurred-function-symbol.
     ff[((A.B).C)] = A
"
    (cond ((atom e) e) ('t (ff (car e)))))

; replace @aRG with @pARAM in @e
; subst [x; y; z] = [atom [z] -> [eq [z; y] -> x; T -> z];
;                    T -> cons [subst [x; y; car [z]]; subst [x; y; cdr [z]]]]
(defun subst (pARAM aRG e)
"subst <param> <arg> <exp>. : [exp]
    -replace <arg> with <param> in <exp>
     subst[(X.A);B;((A.B).C)] = ((A.(X.A)).C)
"
    (cond ((atom e) (cond ((equal e aRG) pARAM) ('t e)))
        ('t (cons (subst pARAM aRG (car e))
            (subst pARAM aRG (cdr e))))))

; append [x; y] = [null[x] -> y; T -> cons [car [x]; append [cdr [x]; y]]]
(defun append (base e)
"append <base> <exp>
    -append <exp> to <base>
     append [(A, B); (C, D, E)] = (A, B, C, D, E)
"
    (cond ((null base) e) ('t (cons (car base) (append (cdr base) e)))))

; among [x; y] = NOT null [y] AND [equal [x; car [y]] OR among [x; cdr [y]]]
(defun among (x e)
"among <value> <exp> : [t/nil]
    -predicate is true if the <value> occurs among the elements of the list <exp>
    @value [exp]:  value
    @exp [list]:   list expression
"
    (cond ((null e) '())
          ('t (or (and (not (null x))
                       (equal x (car e)))
                  (among x (cdr e))))))

; pair [x; y] = [null [x] AND null [y] -> NIL; NOT atom [x] AND NOT atom [y] -> cons [list [car [x]; car [y]]; pair [cdr [x]; cdr [y]]]
(defun pair (x y)
"pair <exp1> <exp2>
    -gives the list of pairs of corresponding elements of the lists <exp1> and <exp2>
     pair [(A, B, C); (X, (Y, Z), U)] = ((A, X), (B, (Y, Z)), (C, U))
"
    (cond ((and (null x) (null y)) '())
          ((and (not (atom x)) (not (atom y)))
            (cons (list (car x) (car y)) (pair (cdr x) (cdr y))))))


; -------------------------------
; list handling functions (refer from common lisp)
; -------------------------------
(defun first (L)
"first <list>
"
    (cond ((null L) '())
          ('t (car L))))

(defun rest (L)
"rest <list>
"
    (cond ((null L) '())
          ('t (cdr L))))

(defun length (L)
"length <list>
"
    (cond ((null L) 0)
          ('t (+ 1 (length (cdr L))))))

(defun nth (n L)
"nth <index > <list>
    -elements are numbered from zero onwards
"
    (cond ((< n 0) '())
          ((null L) '())
          ((equal 0 n) (first L))
          ('t (nth (- n 1) (rest L)))))

(defun last (L)
"last <list>
    -return last cons structure.
"
    (cond ((null L) '())
          ((null (cdr L)) (cons (car L) '()))
          ('t (last (cdr L)))))

(defun reverse (L)
"reverse <list>
    -return reversed list
"
    (let ( (list-reverse-aux '()) )
        (defun list-reverse-aux (L A) ""
            (cond ((null L) A) ('t (list-reverse-aux (rest L) (cons (first L) A)))))
        (list-reverse-aux L '())))

(defun member (e L)
"member <element> <list>
    -Test if <element> is a member of <list>.
"
    (cond ((null L)            '())
          ((equal e (first L)) 't)
          ('t                  (member e (rest L)))))

(defun mapcar (f L)
"mapcar <func> <list>
    -see mapcar of Common Lisp.
"
    (cond
        ((not (null L))
            (cons (eval (list f (car L))) (mapcar f (cdr L))))
        ('t '())))

(defun lclone (E)
"lclone <exp>
    -clone list structure of <exp>
     NOTE! : atomic is not cloned! It's a kind of shallow copy!
     Actually, default atomic data type cannot be modified in LISP.
     (symbol, number, function etc..)
     So, shallow copy is useful enough.
     But BE CAREFUL for extended data type that supports self-modification.
     (ex. trie, array etc...)
"
    (cond
        ( (atom E) E)
        ('t (cons (lclone (car E)) (lclone (cdr E))))))


; alias...
(defun = (x y)
"= <exp1> <exp2>
    -alias of eq
"
    (equal x y))

; not equal
(defun <> (x y)
"<> <exp1> <exp2>
    -alias of not eq
"
    (not (= x y)))

(defun <= (x y)
"<= <exp1> <exp2>
    -less than or equal
"
    (not (> x y)))

(defun >= (x y)
">= <exp1> <exp2>
    -greater than or equal
"
    (not (< x y)))

(defun min (x y)
"min <atom1> <atom2>
    -get minimum.
     this uses '<' function in it.
"
    (cond ( (< x y) x) ('t y)))

(defun max (x y)
"max <atom1> <atom2>
    -get maximum
     this uses '<' function in it.
"
    (cond ( (> x y) x) ('t y)))

(defun 1+ (x)
"1+ <num>
    -return <num> + 1
"
    (+ x 1))

(defun 1- (x)
"1+ <num>
    -return <num> - 1
"
    (- x 1))

(defmacro ++ (n)
"++ <var>
    -+1 and store. <var>++ in C
"
    (set 'n (+ n 1)))

(defmacro -- (n)
"-- <var>
    --1 and store. <var>-- in C
"
    (set 'n (- n 1)))
