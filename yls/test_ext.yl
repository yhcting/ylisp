(set 'map '())
(assert (eq 0 (length map)))
(set 'map (pr+ map 'a 'A))
(assert (equal '((a A)) map))
(assert (eq 1 (length map)))
(set 'map (pr+ map 'b 'B))
(assert (equal '((b B) (a A)) map))
(assert (eq 2 (length map)))
(set 'map (pr+ map '(a) '(A)))
(assert (equal '(((a) (A)) (b B) (a A)) map))
(assert (eq 3 (length map)))

(assert (not (eq '() (pr? map 'a))))
(assert (not (eq '() (pr? map '(a)))))
(assert (eq '() (pr? map '())))
(assert (eq '() (pr? map '(a b))))
(assert (eq '() (pr? map 88)))

(assert (eq 'B (pr* map 'b)))
(assert (eq '() (pr* map 'T)))
(assert (equal '(A) (pr* map '(a))))

(set 'map (pr- map 'b))
(assert (equal '(((a) (A)) (a A)) map))
(set 'map (pr- map 'a))
(assert (equal '(((a) (A))) map))
(set 'map (pr- map '(a)))
(assert (equal '() map))
(assert (eq '() '()))
(print (pr-from-list '() '(a b c)) '"\n")
(assert (equal '((c ()) (b ()) (a ())) (pr-from-list '() '(a b c))))

(defstruct person (name sex))
(set 'me (make-person))
(person-name-set me 'cho)
(assert (eq 'cho (person-name-get me)))
(person-sex-set  me 'male)
(assert (eq 'male (person-sex-get me)))

(defstruct anim (name class nr-leg))
(set 'my (make-anim))
(anim-name-set my 'joe)
(anim-class-set my 'dog)
(anim-nr-leg-set my 4)
(anim-name-set my 'wow)
(assert (eq 'wow (anim-name-get my)))
(assert (eq 4 (anim-nr-leg-get my)))

(unset 'map)
