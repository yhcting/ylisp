(print '"====== Start Testing 'util' ======\n")
(set 'lst '(4 2 3 1 5))
(assert (equal '(5 4 3 2 1) (util.bsort > lst)))
(assert (equal '(1 2 3 4 5) (util.bsort < lst)))

(set 'lst '(ab cd ef gh))
(assert (equal '(ab cd ef gh) (util.bsort < lst)))
(assert (equal '(gh ef cd ab) (util.bsort > lst)))

(set 'lst '(a b cd ef (1 2)))

(assert (eq 5 (util.list.size lst)))
(assert (eq 0 (util.list.size '())))

(assert (eq 'a (util.list.at lst 0)))
(assert (eq 'cd (util.list.at lst 2)))
(assert (eq '() (util.list.at lst -1)))
(assert (eq '() (util.list.at lst 100)))
(assert (equal '(1 2) (util.list.at lst 4)))

(set 'map '())
(assert (eq 0 (util.pair.size map)))
(set 'map (util.pair.add map 'a 'A))
(assert (equal '((a A)) map))
(assert (eq 1 (util.pair.size map)))
(set 'map (util.pair.add map 'b 'B))
(assert (equal '((b B) (a A)) map))
(assert (eq 2 (util.pair.size map)))
(set 'map (util.pair.add map '(a) '(A)))
(assert (equal '(((a) (A)) (b B) (a A)) map))
(assert (eq 3 (util.pair.size map)))

(assert (not (eq '() (util.pair.is-in map 'a))))
(assert (not (eq '() (util.pair.is-in map '(a)))))
(assert (eq '() (util.pair.is-in map '())))
(assert (eq '() (util.pair.is-in map '(a b))))
(assert (eq '() (util.pair.is-in map 88)))

(assert (eq 'B (util.pair.get map 'b)))
(assert (eq '() (util.pair.get map 'T)))
(assert (equal '(A) (util.pair.get map '(a))))

(set 'map (util.pair.del map 'b))
(assert (equal '(((a) (A)) (a A)) map))
(set 'map (util.pair.del map 'a))
(assert (equal '(((a) (A))) map))
(set 'map (util.pair.del map '(a)))
(assert (equal '() map))

(unset 'lst)
(unset 'map)