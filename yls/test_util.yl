(print '"====== Start Testing 'util' ======\n")
(set 'lst '(4 2 3 1 5))
(assert (equal '(5 4 3 2 1) (util.bsort > lst)))
(assert (equal '(1 2 3 4 5) (util.bsort < lst)))

(set 'lst '(ab cd ef gh))
(assert (equal '(ab cd ef gh) (util.bsort < lst)))
(assert (equal '(gh ef cd ab) (util.bsort > lst)))

(set 'pl (util.pl.create))
(assert (eq 0 (util.pl.size pl)))
(util.pl.add pl 'a 'A)
(assert (equal '(() (a A)) pl))
(assert (eq 1 (util.pl.size pl)))
(util.pl.add pl 'b 'B)
(assert (equal '(() (b B) (a A)) pl))
(assert (eq 2 (util.pl.size pl)))
(util.pl.add pl '(a) '(A))
(assert (equal '(() ((a) (A)) (b B) (a A)) pl))
(assert (eq 3 (util.pl.size pl)))

(assert (not (eq '() (util.pl.is-in pl 'a))))
(assert (not (eq '() (util.pl.is-in pl '(a)))))
(assert (eq '() (util.pl.is-in pl '())))
(assert (eq '() (util.pl.is-in pl '(a b))))
(assert (eq '() (util.pl.is-in pl 88)))

(assert (eq 'B (util.pl.get pl 'b)))
(assert (eq '() (util.pl.get pl 'T)))
(assert (equal '(A) (util.pl.get pl '(a))))

(util.pl.del pl 'b)
(assert (equal '(() ((a) (A)) (a A)) pl))
(util.pl.del pl 'a)
(assert (equal '(() ((a) (A))) pl))
(util.pl.del pl '(a))
(assert (equal '(()) pl))
