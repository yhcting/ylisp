(print '"====== Start Testing 'util' ======\n")
(set 'lst '(4 2 3 1 5))
(assert (equal '(5 4 3 2 1) (ut.bsort > lst)))
(assert (equal '(1 2 3 4 5) (ut.bsort < lst)))

(set 'lst '(ab cd ef gh))
(assert (equal '(ab cd ef gh) (ut.bsort < lst)))
(assert (equal '(gh ef cd ab) (ut.bsort > lst)))

(set 'map '())
(assert (eq 0 (length map)))
(set 'map (ut.pair.add map 'a 'A))
(assert (equal '((a A)) map))
(assert (eq 1 (length map)))
(set 'map (ut.pair.add map 'b 'B))
(assert (equal '((b B) (a A)) map))
(assert (eq 2 (length map)))
(set 'map (ut.pair.add map '(a) '(A)))
(assert (equal '(((a) (A)) (b B) (a A)) map))
(assert (eq 3 (length map)))

(assert (not (eq '() (ut.pair.is-in map 'a))))
(assert (not (eq '() (ut.pair.is-in map '(a)))))
(assert (eq '() (ut.pair.is-in map '())))
(assert (eq '() (ut.pair.is-in map '(a b))))
(assert (eq '() (ut.pair.is-in map 88)))

(assert (eq 'B (ut.pair.get map 'b)))
(assert (eq '() (ut.pair.get map 'T)))
(assert (equal '(A) (ut.pair.get map '(a))))

(set 'map (ut.pair.del map 'b))
(assert (equal '(((a) (A)) (a A)) map))
(set 'map (ut.pair.del map 'a))
(assert (equal '(((a) (A))) map))
(set 'map (ut.pair.del map '(a)))
(assert (equal '() map))

(unset 'lst)
(unset 'map)