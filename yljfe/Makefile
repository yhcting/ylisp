top="$(CURDIR)"/

VERSION=1.0

# Target name of dependency file generated by GCC, is just xxx.o
# So, we need post processing to handle it properly.
# To avoid this overhead... we don't use output directory.!
OUTDIR:=
DEPDIR:=.deps/
EXTLIB_DIR:=../lib/

EXT_LIBRARY:=ylisp
EXTLIB=$(addprefix $(EXTLIB_DIR),$(addsuffix .a,$(addprefix lib,$(EXT_LIBRARY))))

SOURCES= main.c
OBJ=$(subst .c,.o, $(addprefix $(OUTDIR),$(SOURCES)))
DEP_FILES=$(subst .c,.P, $(addprefix $(DEPDIR),$(SOURCES)))

TARGET=$(OUTDIR)yljfe

CC=gcc
CFLAGS+= -Wall -g
LDFLAGS+= -rdynamic -ldl -lrt -lpthread -ljvm
SOFLAGS+=
JAVAINC:=/usr/lib/jvm/default-java/include/
INCLUDES=-I../include -I$(JAVAINC)
C_COMPILE=$(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
C_DEPENDENCIES=-Wp,-MD,$(DEPDIR)$(*F).P
C_LINK=$(CC) $(CFLAGS) $(LDFLAGS) -L.


JSRCDIR=jsrc/
JOUTDIR=$(JSRCDIR)bin/
JTARGET=yljfe.jar
JC=javac
JSOURCES=$(JSRCDIR)YLJEditArea.java $(JSRCDIR)Main.java
JFLAGS=-Xlint:unchecked -d $(JOUTDIR)

release: $(TARGET) $(JTARGET)

DEPS_MAGIC := $(shell mkdir $(DEPDIR) $(OUTDIR) $(JOUTDIR) > /dev/null 2>&1 || :)

# simply ignore file which doesn't exist. (At first these files don't exist..)
-include $(DEP_FILES)

$(JTARGET): $(JSOURCES)
	@echo '$(JC) $(JFLAGS) $^'; \
	$(JC) $(JFLAGS) $^
	cd $(JOUTDIR); jar cf $@ *.class; mv $@ $(top)
	cp $@ ../lib

$(OUTDIR)%.o: %.c
	@echo '$(C_COMPILE) -o $@ -c $<'; \
	$(C_COMPILE) $(C_DEPENDENCIES) -o $@ -c $<

$(TARGET): $(OBJ) $(EXTLIB)
	@echo '$(C_LINK) -o $@ $^'; \
	$(C_LINK) -o $@ $^

clean:
	rm -f *.mod *.o *.obj .lo $(TARGET) $(LIB)
	rm -f $(JTARGET)
	rm -rf $(JOUTDIR)
	rm -rf $(DEPDIR)
	rm -rf $(OUTDIR)

# End of Makefile
