/*****************************************************************************
 *    Copyright (C) 2010 Younghyung Cho. <yhcting77@gmail.com>
 *
 *    This file is part of YLISP.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as
 *    published by the Free Software Foundation either version 3 of the
 *    License, or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License
 *    (<http://www.gnu.org/licenses/lgpl.html>) for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/



/****************************************************
 * 'lambda' and 'mlambda' here are dummy to use 'Auto Completion' and 'help'.
 * Function pointer 'NULL' for 'lambda' and 'mlamdba' are never used.
 * (For details, see 'sfunc.c')
 ****************************************************/
NFUNC(__dummy,                "lambda",                  ylaif_sfunc(),
    "(lambda <arg> <body>) <param1> <param2> ...\n"
    "    -lambda expression of S-Function.\n"
    "    *ex\n"
    "        ((lambda (x y) (+ x y)) 7 8) ; ==> 15\n")

NFUNC(__dummy,                "mlambda",                 ylaif_sfunc(),
    "(mlambda <arg> <body>) <param1> <param2> ...\n"
    "    -macro versin of lambda. parameters are never evaluated.\n"
    "     (eval ((mlambda (x y) (+ x y) 7 8)))\n"
    "        => eval [(+ 7 8)] <- evaluate replaced expression\n"
    "    +Special usage for 'mlambda' - in the case of <arg> = ()\n"
    "        (eval ((mlambda () (<body>)) <param1> ...))\n"
    "            => eval [ (<body> <param1> ...) ]\n")

NFUNC(quote,                  "quote",                   ylaif_sfunc(),
    "quote <exp>\n"
    "    -Special s-function. parameter is not evaluated.\n"
    "    @exp:    any lisp expression.\n"
    "    @return: not-evaluated-symbol-itself\n"
    "    *ex\n"
    "        (quote abc); => abc\n")

NFUNC(apply,                  "apply",                   ylaif_sfunc(),
    "apply <func> <arg1> <arg2> ...\n"
    "    -Special s-function. parameter is not evaluated.\n"
    "     ** apply [f; args] = eval [cons [f; appq [args]]; NIL] **\n"
    "    @func[Symbol]:   symbol that represents function name.\n"
    "    @return:         result of evaulation\n"
    "    *ex\n"
    "        (apply list a b) ; => (list 'a 'b) => (a b)\n")

NFUNC(f_mset,                 "f-mset",                  ylaif_nfunc(),
    "f-mset <symbol> <exp> (<desc>)\n"
    "    -Set macro. Syntax is same with 'set'. But this is for setting macro\n"
    "     Evaluating <symbol> is same with evaluating <exp>.\n"
    "     'mset' circular expression may crash interpreter when it used!"
    "    @symbol[Symbol]: symbol name.\n"
    "    @exp:            lisp expression.\n"
    "    @desc[Symbol]:\n"
    "        description of this symbol.\n"
    "        but, in case of local symbol(let), this is ignored.\n"
    "    *ex\n"
    "        (f-mset 'a '+) ;(a 7 8) => (+ 7 8)\n"
    "        (f-mset 'zzz 'rrr)\n"
    "        (f-mset 'rrr 'ttt)\n"
    "        (f-mset 'ttt '(car (list yy x y)))\n"
    "        (f-mset 'yy '(car '(ab cd)))\n"
    "        ;(equal zzz 'ab) => t\n")

NFUNC(f_tmset,                "f-tmset",                 ylaif_nfunc(),
    "Per-thread symbol version of f-mset. See f-mset for details.\n")

NFUNC(eq,                     "eq",                      ylaif_nfunc(),
    "eq <exp1> <exp2>: [t/nil]\n"
    "    -Compare memory address of two expression.\n"
    "    @return: t if memory address of two objects are same. nil otherwise.\n")

NFUNC(equal,                  "equal",                   ylaif_nfunc(),
    "equal <exp1> <exp2>: [t/nil]\n"
    "    -Compare two exps.\n"
    "     Compare circular expression crash interpreter!"
    "    @return: t if two exps are same. nil otherwise.\n"
    "    *ex\n"
    "        (equal 'abc 'abc); => t\n"
    "        (equal 'ab 'a); => nil\n"
    "        (equal '(a b) 'c); => nil\n")

NFUNC(set,                    "set",                     ylaif_nfunc(),
    "set <symbol> <exp> (<desc>)\n"
    "    -After evaluating this expression, evaluating <symbol> returns <exp>.\n"
    "     see 'mset' for more descrption.\n"
    "     *ex\n"
    "         (set 'a '(x y)); (a) => ('(x y))\n")

NFUNC(tset,                   "tset",                    ylaif_nfunc(),
    "Per-thread symbol version of set. See set for details.\n")

NFUNC(unset,                  "unset",                   ylaif_nfunc(),
    "unset <symbol>\n"
    "    -Remove symbol from the global space.\n"
    "    @return: t if removed, nil if symbol doesn't exist.\n")

NFUNC(tunset,                 "tunset",                  ylaif_nfunc(),
    "Per-thread symbol version of unset. See unset for details.\n")

NFUNC(is_set,                 "set?",                    ylaif_nfunc(),
    "set? <symbol> : [t/nil]\n"
    "    -check whether specified <symbol> is set in global symbol space or not.\n"
    "    @return: t if exists. Otherwise nil\n")

NFUNC(is_tset,                "tset?",                   ylaif_nfunc(),
    "Per-thread symbol version of set?. See set? for details.\n")

NFUNC(eval,                   "eval",                    ylaif_nfunc(),
    "eval <exp>\n"
    "    -Evaluates expression.\n"
    "    @return: depends on <exp>\n"
    "    *ex\n"
    "        (set 'q '(x y))\n"
    "        (eval 'q); => eval [q] => (x y)\n")

NFUNC(help,                   "help",                    ylaif_nfunc(),
    "help <sym1> <sym2> ...\n"
    "    -see description and it's contents of this symbol\n"
    "     'M :' means \"This value is macro.\"\n"
    "    *ex\n"
    "        (help 'help); to see this description\n")

NFUNC(load_cnf,               "load-cnf",                ylaif_nfunc(),
    "load-cnf <file name> : [t/nil]\n"
    "    -LOAD Customized Native Function with given namespace.\n"
    "     Register new custom-native functions from plug-in library\n"
    "     ylcnf_onload of plug-in is called\n"
    "    @file name [Symbol]:  plug-in file name\n"
    "    *ex\n"
    "        (load-cnf 'ylbase.so)\n")

NFUNC(unload_cnf,             "unload-cnf",              ylaif_nfunc(),
    "unload-cnf <file name> : [t/nil]\n"
    "    -UNLOAD Custom-Native-Function.\n"
    "     ylcnf_onunload of plug-in is called\n"
    "     See 'load-cnf' for more\n"
    "     *ex\n"
    "         (unload-cnf 'ylbase.so 'yllibylbase_unregister)\n")

NFUNC(interpret_file,         "interpret-file",          ylaif_nfunc(),
    "interpret-file <file name> : [t/nil]\n"
    "    -interpret other ylisp script file\n"
    "    @file name [Symbol]: file path\n"
    "    *ex\n"
    "        (interpret-file 'ylbase.yl)\n")

/****************************************************
 *
 * To support Multi-Threading Features!
 *
 ****************************************************/
NFUNC(ts,                     "ts",                      ylaif_nfunc(),
    "ts : t\n"
    "    -print thread list\n")

NFUNC(kill,                   "kill",                    ylaif_nfunc(),
    "kill <tid>: [t/nil]\n"
    "    -kill thread with thread id\n"
    "    @tid [Double] : id of thread\n")

NFUNC(create_thread,          "create-thread",           ylaif_nfunc(),
    "create-thread <code> : [Double] t\n"
    "    -create thread and interpret given code.\n"
    "    @code [Symbol]\n"
    "    *ex\n"
    "        (create-thread '\"(car '(a b))\")\n")
