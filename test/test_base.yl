; Assumption : ylbase.so is loaded!
; test

; Test syntax parsor
(set 'x '\")
(assert (equal x '\"))
(set 'x (quote \"))
(assert (equal x '\"))


(set 'rrr 'ttt)
(assert
    (equal rrr 'ttt))

(mset zzz rrr)
(assert
    (equal zzz 'ttt))

(mset rrr ttt)
(mset ttt (car (list yy '(x y))))
(mset yy (car '(ab cd)))

;special expansion of ylisp
(set 'gg1 'quote)
; ((eval 'gg1) haha) -> (quote haha) -> haha
(assert (equal 'haha ((eval 'gg1) haha)))
(set 'gg2 '(eval 'gg1))
(assert (equal 'haha ((eval 'gg2) haha)))


; check type checking
(assert (equal (type 'aa) (type 'bb)))
(assert (equal (type 7) (type 8)))
(assert (equal (type '(a b)) (type '(c d))))
(assert (not (equal (type 7) (type 'ab))))
(assert (not (equal (type 'ab) (type '(a b)))))


(assert
    (equal yy 'ab))
(assert
    (equal zzz 'ab))

(assert (equal '(x a b) '(x a b)))
(assert (equal '(x a) (cons 'x (cons 'a '()))))

(defmacro ee (x y)
    "test macro"
    (car '(x y)))

(assert
    (equal '(a b)
        (ee (a b) (c d))))

(assert (equal 't (and (equal 8 8) (equal 7 7))))
(assert (equal '() (and (equal 1 2) (assert '()))))
(assert (equal 't (or (equal 1 1) (equal 2 4))))
(assert (equal '() (or (equal 1 2) (equal 1 3) (equal 2 3))))

(assert (equal '() (not (equal 1 1))))
(assert (equal 't (not (equal 1 2))))

(assert (equal
    '(a (x a) c)
    (subst '(x a) 'b '(a b c))))

(assert (equal
    '(a b c d e)
    (append '(a b) '(c d e))))

(assert (equal 't
    (among 'x '(a b x c d))))
(assert (equal '()
    (among 'x '(a b c d e))))

(assert (equal
    '((a x) (b (y z)) (c u))
    (pair '(a b c) '(x (y z) u))))

(set 'x '(1 2 3))
(assert (equal '(1 2 3) x))
(let ((x '(a b)) (y (list x '(l m))))
    (assert (equal '(a b) x))
    (assert (equal '((a b) (l m)) y))
    (set 'x (list x y))
    (assert (equal '((a b) ((a b) (l m))) x)))
(assert (equal '(1 2 3) x))

(let ((x 'a) (y 'b))
    (set 'y (list x y))
    (assert (equal '(a b) y)))

; test for nested let!
(let ((x 'a) (y 'b))
    (set 'x 'f)
    (set 't 'y)
    (let ((x 'c)(t 'z))
        (assert (equal x 'c))
        (assert (equal y 'b))
        (set 'x 'd)
        (assert (equal x 'd)))
    (assert (equal t 'y))
    (assert (equal x 'f)))

(assert (equal 2 (+ 1 1)))
(assert (equal 3 (+ 2 1)))
(assert (equal 1 (- 2 1)))
(assert (equal 1 (* 1 1)))
(assert (equal 6 (* 2 3)))
(assert (equal 0 (* 100 0)))
(assert (equal 3 (/ 6 2)))
(assert (equal 8 (/ 8 1)))

(assert (equal 't (> 2 1)))
(assert (= 't (> 2 1)))
(assert (= '() (< 2 1)))
(assert (= '() (< 1 1)))
(assert (= 't (> 'abc 'abb)))

(print '"\n
")

(print '"\n" x '"\n" '(1 2 3) '"\n")
(print 500 '"\n")
(printf '"%-20s --> %-10s : %-5s\n" '"this is test" '"OK?" 500)

(log '"v" '"this is verbose log" '"OK?\n")
(log '"d" '"this is dev log")

(assert (equal 'a (to-string 'a)))
(assert (equal '"(x y)" (to-string '(x y))))

(assert (equal 5.0 (integer 5.892)))
(assert (equal 0xffffffff (integer 0xffffffff)))

(assert (equal 0x1 (& 0x1 0x3 0x7 0xf 0xff)))
(assert (equal 0xff (| 0x1 0x2 0x4 0x8 0x10 0x20 0x40 0x80)))
(assert (equal 0x3 (^ 0x1 0x2 0x4 0x8 0x4 0x8)))

(set 'i 0)
(set 's 0)
(while (< i 11)
    (progn
        (set 's (+ s i))
        (set 'i (+ i 1))))
(assert (equal s 55))

(let ((i 0) (s 0))
    (while (< i 11)
        (set 's (+ s i))
        (set 'i (+ i 1)))
    (set 'sum s))
(assert (equal sum 55))

(let ((i 0) (s 0))
    (while (< i 11)
        (set 's (+ s i))
        (let ( (j 0) )
             (+ j i))
        (set 'i (+ i 1)))
    (set 'sum s))

(set 'i 3)
(while (> i 0)
    (let ((j 0))
        (print j))
    (set 'i (- i 1)))

(assert (equal 3 (% 7 4)))
(assert (equal 0 (% 3 3)))

(assert (equal '() (caar 'a)))
(assert (equal '() (caar '(a))))
(assert (equal 'a (caar '((a b) c))))
(assert (equal '(a) (caar '(((a) b) c))))

(assert (equal '(a b) (caaar '((((a b) c))))))
(assert (equal '((a b) 1) '((a b) 1)))


(set 'ttt '(x y (1 2)))
; yyy points same instance with ttt.
(set 'yyy ttt)
(setcar (cdr yyy) '(a b))
(assert (equal ttt '(x (a b) (1 2))))
(set 'ttt '(x y (1 2)))
(assert (equal 5 (min 5 9)))
(assert (equal 5 (max 5 4)))

(set 'f 1234)
(let ( (f '()) )
     (mset f +)
     (assert (equal 7 (f 3 4))))
(assert (equal 1234 f))


(let ( (f 0) )
    (++ f)
    (assert (equal 1 f))
    (++ f)
    (assert (equal 2 f)))

(let ( (f 4) )
    (-- f)
    (assert (equal 3 f))
    (-- f)
    (assert (equal 2 f)))

(assert (equal 'abcdefgh (concat 'ab 'cdef 'gh)))

(assert (symtype? 'a))
(assert (not (symtype? 1)))
(assert (dbltype? 1))
(assert (not (dbltype? 'a)))
(assert (sfunctype? quote))
(assert (not (sfunctype? car)))
(assert (not (sfunctype? 'a)))
(assert (nfunctype? car))
(assert (not (nfunctype? quote)))

; test 'case'
(set 'a 1) (set 'b 1) (set 'c 2) (set 'd 3)

(f-case 'a '((b c) 1) '(d 2) '(otherwise 3))
(assert (equal 1
        (case a
            ((b c) (print 'ttt) 1)
            (d     (print 'fff) 2)
            (otherwise (print 'otherwise) 3))))

(assert (equal 1
        (case a
            (( (+ 0 1) c) (print 'ttt) 1)
            (d            (print 'fff) 2)
            (otherwise    (print 'otherwise) 3))))

(assert (equal 3
        (case a
            ((c) (print 'ttt) 1)
            (d    (print 'fff) 2)
            (otherwise  3))))

(assert (equal 3
        (case a
            (otherwise 3)
            ((c) (print 'ttt) 1)
            (d    (print 'fff) 2))))

(assert (equal '()
        (case a
            (d 't))))

(unset 'a)
(unset 'b)
(unset 'c)
(unset 'd)



; test list handling
(set 'lst '(a b cd ef (1 2)))

(assert (equal 'a (first lst)))
(assert (equal '(b cd ef (1 2)) (rest lst)))

(assert (equal 5 (length lst)))
(assert (equal 0 (length '())))

(assert (equal 'a (nth 0 lst)))
(assert (equal 'cd (nth 2 lst)))
(assert (equal '() (nth -1 lst)))
(assert (equal '() (nth 100 lst)))
(assert (equal '(1 2) (nth 4 lst)))

(set 'lst '(0 1 2 3 4))
(assert (equal '(4) (last lst)))
(assert (equal '(4 3 2 1 0) (reverse lst)))
(assert (member '4 lst))
(assert (not (member '100 lst)))

(assert (equal 3 (1+ 2)))
(assert (not (equal 3 (1+ 1))))
(assert (equal 2 (1- 3)))
(assert (equal (list 2 3 4 5) (mapcar '1+ '(1 2 3 4))))
(assert (equal (list 't '() 't '()) (mapcar 'not '( '() 't '() 't))))

(set 't (lclone '((a b) c)))
(assert (equal '((a b) c) t))

;
; test for cycle
; make cycle!
(set 't (list '('a 'b) 'c))
(setcar (cdar t) t)
(print t '"\n") ; ylisp should be able to print circular list!

(unset 'ee)
(unset 't)
(unset 'rrr)
(unset 'yyy)
(unset 'ttt)
(unset 'zzz)
(unset 'yy)
(unset 'gg1)
(unset 'gg2)
(unset 'x)
(unset 'y)
(unset 'i)
(unset 's)
(unset 'lst)
