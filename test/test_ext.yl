(print '"====== Start Testing 'ext' ======\n")

;=============================
; Test Math
;=============================
(print '"====== Start Testing 'math' ======\n")
(assert (equal 't (fuzzy-equal 0.9998 0.9999 0.001)))
(assert (equal 5.0 (integer 5.892)))
(assert (fuzzy-equal 0.98 (fraction 5.98) 0.00000001))
(assert (equal 1024 (pow 2 10)))

;=============================
; Test String
;=============================
(print '"====== Start Testing 'string' =======\n")
(assert (equal 5 (strlen 'abcde)))
(set 'x 10.98)
(assert (equal '10 (itos x)))
(assert (equal '10.980000 (dtos x)))
(set 'lns (split-to-line '"123\n\n7890\nabcd"))
(assert (equal '123 (car lns)))
(assert (equal 0 (strlen (cadr lns))))
(assert (equal '7890 (caddr lns)))
(assert (equal 'abcd (car (cdddr lns))))

; test pcre if possible!
(cond ((set? 're-match)
        (let ((R '()))
            (set 'R (re-match '"([0-9]+)([a-z]+)\\s" '"  hahah 12abc123abcd effff" '""))
            (assert (equal '"123abcd " (car R)))
            (assert (equal '123 (cadr R)))
            (assert (equal 'abcd (caddr R)))
            (set 'R (re-match '"^([0-9]+)([a-z]+)" '"123aBcD fff" '"i"))
            (assert (equal '123aBcD (car R))))))

(cond ((set? 're-replace)
        (let ((R '()) (subj '"hahaha my name is cho!"))
            (set 'R (re-replace '"name" '"full name" subj '""))
            (assert (equal R '"hahaha my full name is cho!"))
            (assert (equal '"Abcde abcde ab" (re-replace 'a 'A '"abcde abcde ab" '"")))
            (assert (equal '"abcde" (re-replace 't 'T '"abcde" '"")))
            (assert (equal '"Abcde Abcde Ab" (re-replace 'a 'A '"abcde abcde ab" '"g"))))))

(assert (equal 'a (char-at 'abcdefg 0)))
(assert (equal 'g (char-at 'abcdefg 6)))
(assert (equal 'c (char-at 'abcdefg 2)))

(assert (< (strcmp 'ab 'cd) 0))
(assert (> (strcmp 'cd 'ab) 0))
(assert (= (strcmp 'ab 'ab) 0))

(assert (not (end-with 'abc 'abcd)))
(assert (not (end-with '"" 'ab)))
(assert (not (end-with 'abc '"")))
(assert (not (end-with 'abcde 'ed)))
(assert (end-with 'abcde 'abcde))
(assert (end-with 'abcde 'cde))
(assert (end-with 'abcde 'e))

(assert (not (start-with 'abc 'abcd)))
(assert (not (start-with '"" 'ab)))
(assert (not (start-with 'abc '"")))
(assert (not (start-with 'abcde 'ed)))
(assert (not (start-with 'abcde 'ab 1)))
(assert (not (start-with 'abcde 'ab 5)))
(assert (not (start-with 'abcde 'b -2)))
(assert (start-with 'abcde 'abcde))
(assert (start-with 'abcde 'abc))
(assert (start-with 'abcde 'a))
(assert (start-with 'abcde 'a 0))
(assert (not (start-with 'abcde 'a -1)))
(assert (start-with 'abcde 'cd 2))

(assert (equal '() (index-of 'abcdeabcde '"")))
(assert (equal '() (index-of 'abcdeabcde 'abcdefabcdef)))
(assert (equal '() (index-of '"" '"")))
(assert (equal '() (index-of '"" 'abc)))
(assert (equal 0 (index-of 'abcdeabcde 'a)))
(assert (equal 0 (index-of 'abcdeabcde 'abcdeabcde)))
(assert (equal 0 (index-of 'abcdeabcde 'abc)))
(assert (equal 2 (index-of 'abcdeabcde 'cde)))
(assert (equal '() (index-of 'abcdeabcde 'tt)))
(assert (equal 2 (index-of 'abcdeabcde 'cd)))
(assert (equal 2 (index-of 'abcdeabcde 'cd 2)))
(assert (equal 7 (index-of 'abcdeabcde 'cd 3)))
(assert (equal 7 (index-of 'abcdeabcde 'cd 7)))
(assert (equal '() (index-of 'abcdeabcde 'cd 8)))

(assert (equal '() (last-index-of 'abcdeabcde '"")))
(assert (equal '() (last-index-of 'abcdeabcde 'abcdefabcdef)))
(assert (equal '() (last-index-of '"" '"")))
(assert (equal '() (last-index-of '"" 'abc)))
(assert (equal 5 (last-index-of 'abcdeabcde 'a)))
(assert (equal 5 (last-index-of 'abcdeabcde 'abc)))
(assert (equal 0 (last-index-of 'abcdeabcde 'abcdeabcde)))
(assert (equal '() (last-index-of 'abcdeabcde 'tt)))
(assert (equal 5 (last-index-of 'abcdeabcde 'a 5)))
(assert (equal 0 (last-index-of 'abcdeabcde 'a 4)))

(assert (equal '1234512345 (replace 'abcdeabcde 'abcde '12345)))
(assert (equal 'abcdeabcde (replace 'abcdeabcde '"" '12345)))
(assert (equal 'abcdeabcde (replace 'abcdeabcde '"" '"")))
(assert (equal 'dede (replace 'abcdeabcde 'abc '"")))
(assert (equal '12345 (replace 'abcdeabcde 'abcdeabcde '12345)))

(assert (equal 'abcdeabcde (substring 'abcdeabcde 0)))
(assert (equal 'abcdeabcde (substring 'abcdeabcde -3)))
(assert (equal 'abcde (substring 'abcdeabcde 5)))
(assert (equal '"" (substring 'abcdeabcde 100)))
(assert (equal '"" (substring 'abcdeabcde 6 3)))
(assert (equal '"" (substring 'abcdeabcde 0 0)))
(assert (equal 'a (substring 'abcdeabcde 0 1)))
(assert (equal 'e (substring 'abcdeabcde 9 10)))
(assert (equal 'cd (substring 'abcdeabcde 7 9)))
(assert (equal 'ab (substring 'abcdeabcde 0 2)))
(assert (equal 'cde (substring 'abcdeabcde 2 5)))

(assert (equal 'abc12de (to-lower-case 'abC12De)))
(assert (equal 'ABC12DE (to-upper-case 'abC12De)))

(assert (equal 'abc  (trim 'abc)))
(assert (equal 'abc  (trim '"  abc")))
(assert (equal 'abc  (trim '"  abc   ")))
(assert (equal '""  (trim '"     ")))

(unset 'x)
(unset 'lns)

;=============================
; Test System
;=============================
(print '"====== Start Testing 'system' =======\n")
(sh 'ls)
(print (sh '"echo abcd"))
(assert (equal '"abcd
" (sh '"echo abcd")))
(assert (setenv 'EnvTest 'hahaha))
(assert (equal 'hahaha (getenv 'EnvTest)))
(assert (equal '"01234567890123456789012345678901234567890123456789
"            (sh '"echo 01234567890123456789012345678901234567890123456789")))
(assert (equal '"abcde
"            (sh '"echo abcde")))
(let ( (i 3) )
     (while (< 0 i)
         (print (sh '"echo hahahaha") '"\n")
         (set 'i (- i 1))))

;=============================
; Test Pair Operation
;=============================
(set 'map '())
(assert (equal 0 (length map)))
(set 'map (pr+ map 'a 'A))
(assert (equal '((a A)) map))
(assert (equal 1 (length map)))
(set 'map (pr+ map 'b 'B))
(assert (equal '((b B) (a A)) map))
(assert (equal 2 (length map)))
(set 'map (pr+ map '(a) '(A)))
(assert (equal '(((a) (A)) (b B) (a A)) map))
(assert (equal 3 (length map)))

(assert (not (equal '() (pr? map 'a))))
(assert (not (equal '() (pr? map '(a)))))
(assert (equal '() (pr? map '())))
(assert (equal '() (pr? map '(a b))))
(assert (equal '() (pr? map 88)))

(assert (equal 'B (pr* map 'b)))
(assert (equal '() (pr* map 'T)))
(assert (equal '(A) (pr* map '(a))))

(set 'map (pr- map 'b))
(assert (equal '(((a) (A)) (a A)) map))
(set 'map (pr- map 'a))
(assert (equal '(((a) (A))) map))
(set 'map (pr- map '(a)))
(assert (equal '() map))
(assert (equal '() '()))
(print (pr-from-list '() '(a b c) '()) '"\n")
(assert (equal '((c ()) (b ()) (a ())) (pr-from-list '() '(a b c) '())))

;=============================
; Test Etc
;=============================
(set 'lst '(4 2 3 1 5))
(assert (equal '(5 4 3 2 1) (bsort > lst)))
(assert (equal '(1 2 3 4 5) (bsort < lst)))

(set 'lst '(ab cd ef gh))
(assert (equal '(ab cd ef gh) (bsort < lst)))
(assert (equal '(gh ef cd ab) (bsort > lst)))

(unset 'lst)

;=============================
; Test Trie
;=============================
; test about struct trie interface...
(set 'tr0 (make-trie '((ab 12) (cd 34) (ef 56))))
(set 'tr1 (make-trie '((rs '()) (tu 'name) (vw 100) )))
(assert (equal 12 (trie* tr0 'ab)))
(trie+ tr0 'ab 50)
(assert (equal 50 (trie* tr0 'ab)))
(trie+ tr0 'gh)
(assert (equal '() (trie* tr0 'gh)))
(trie+ tr0 'ij 90)
(assert (equal 90 (trie* tr0 'ij)))
(assert (equal 't (trie- tr0 'gh)))
(assert (equal '() (trie- tr0 'gh)))
(assert (equal 56 (trie* tr0 'ef)))
(assert (equal 'name (trie* tr1 'tu)))
(trie+ tr0 'ef tr1)
(assert (equal 100 (trie* (trie* tr0 'ef) 'vw)))

; -- & equal
(set 'tr0 (make-trie '((ab 12) (cd 34) (ef 56))))
(set 'tr1 (make-trie '((ab 12) (cd 34) (ef 56))))
(assert (equal tr0 tr1))

(unset 'tr0)
(unset 'tr1)

;=============================
; Test Array
;=============================
(set 'i 0)
(set 'j 0)
(set 'k 0)

;-- set & unset
(set 'ar0 (make-array 10))
(unset 'ar0)


(set 'ar1 '())
(set 'ar0 (make-array 10))
(while (< i 10)
    (arr+ ar0 i i)
    (++ i))
(assert (equal 0 (arr* ar0 0)))
(assert (equal 5 (arr* ar0 5)))
(arr+ ar0 100 5)
(assert (equal 100 (arr* ar0 5)))
(set 'ar0 (make-array 10 10))
(set 'i 0)
(while (< i 10)
    (set 'j 0)
    (while (< j 10)
        (arr+ ar0 (+ (* 10 i) j) i j)
        (++ j))
    (++ i))
(assert (equal 0 (arr* ar0 0 0)))
(assert (equal 5 (arr* ar0 0 5)))
(assert (equal 10 (arr* ar0 1 0)))
(assert (equal 23 (arr* ar0 2 3)))
(arr+ (arr* ar0 2) 1000 4)
(assert (equal 1000 (arr* ar0 2 4)))
(assert (equal 1000 (arr* (arr* ar0 2) 4)))
(set 'ar1 (make-array 100))
(set 'i 0)
(while (< i 100)
    (arr+ ar1 (+ 1000 i) i)
    (++ i))
(arr+ ar0 ar1 1 1)
(assert (equal 1000 (arr* ar0 1 1 0)))
(assert (equal 1050 (arr* ar0 1 1 50)))
(arr+ ar0 11 1 1)
(assert (equal 11 (arr* ar0 1 1)))
(arr+ ar0 101 1 1)
(assert (equal 101 (arr* ar0 1 1)))

;-- Equal
(set 'ar0 (make-array 10 10))
(set 'i 0)
(while (< i 10)
    (set 'j 0)
    (while (< j 10)
        (arr+ ar0 (+ (* 10 i) j) i j)
        (++ j))
    (++ i))
(set 'ar1 (make-array 10 10))
(set 'i 0)
(while (< i 10)
    (set 'j 0)
    (while (< j 10)
        (arr+ ar1 (+ (* 10 i) j) i j)
        (++ j))
    (++ i))
(assert (equal ar0 ar1))
(assert (equal 0 (arr* ar0 0 0)))
(assert (equal 5 (arr* ar0 0 5)))
(assert (equal 10 (arr* ar0 1 0)))
(assert (equal 23 (arr* ar0 2 3)))


(unset 'i)
(unset 'j)
(unset 'k)
(unset 'ar0)
(unset 'ar1)

;=============================
; Test Struct (Trie Based)
;=============================
(defstruct person (name sex))

(set 'me (make-person))
(person.name+ me 'cho)
(assert (equal 'cho (person.name* me)))
(person.sex+  me 'male)
(assert (equal 'male (person.sex* me)))

(set 'you (make-person))
(person.name+ you 'cho)
(person.sex+  you 'male)

(print me '"\n")
(print you '"\n")
(print '--- (person.name* me) '--- '"\n")
(print '--- (person.name* you) '--- '"\n")
(print (equal me you) '"\n")
(assert (equal 'cho (person.name* you)))
(assert (equal 'male (person.sex* you)))
(unset 'you)

(assert (equal 'cho (person.name* me)))
(assert (equal 'male (person.sex* me)))

(undef-person)
(assert (not (set? 'make-pserson)))
(assert (not (set? 'person.name*)))
(assert (not (set? 'person.name+)))
(assert (not (set? 'person.sex*)))
(assert (not (set? 'person.sex+)))



(defstruct anim (name class nr-leg))
(set 'my (make-anim))
(anim.name+ my 'joe)
(anim.class+ my 'dog)
(anim.nr-leg+ my 4)
(anim.name+ my 'wow)
(assert (equal 'wow (anim.name* my)))
(assert (equal 4 (anim.nr-leg* my)))

(undef-anim)
(assert (not (set? 'make-anim)))
(assert (not (set? 'anim.name*)))
(assert (not (set? 'anim.name+)))

(unset 'map)
