(print '"\n====== Start Testing 'ext' ======\n")

;=============================
; Test Math
;=============================
(print '"\n====== Start Testing 'math' ======\n")
(cond ((set? 'pow) (progn 
    (assert (equal 't (fuzzy-equal 0.9998 0.9999 0.001)))
    (assert (fuzzy-equal 0.98 (fraction 5.98) 0.00000001))
    (assert (equal 1024 (pow 2 10)))
)))

;=============================
; Test String
;=============================
(print '"\n====== Start Testing 'string' =======\n")
(assert (equal 5 (strlen 'abcde)))
(set 'exts 10.98)
(assert (equal '10 (to-string (integer exts))))
(assert (equal '10.980000 (to-string exts)))
(set 'extlns (split-to-line '"123\n\n7890\nabcd"))
(assert (equal '123 (car extlns)))
(assert (equal 0 (strlen (cadr extlns))))
(assert (equal '7890 (caddr extlns)))
(assert (equal 'abcd (car (cdddr extlns))))

; test pcre if possible!
(cond ((set? 're-match)
        (let ((R '()))
            (set 'R (re-match '"([0-9]+)([a-z]+)\\s" '"  hahah 12abc123abcd effff" '""))
            (assert (equal '"123abcd " (car R)))
            (assert (equal '123 (cadr R)))
            (assert (equal 'abcd (caddr R)))
            (set 'R (re-match '"^([0-9]+)([a-z]+)" '"123aBcD fff" '"i"))
            (assert (equal '123aBcD (car R))))
))

(cond ((set? 're-replace)
        (let ((R '()) (subj '"hahaha my name is cho!"))
            (set 'R (re-replace '"name" '"full name" subj '""))
            (assert (equal R '"hahaha my full name is cho!"))
            (assert (equal '"Abcde abcde ab" (re-replace 'a 'A '"abcde abcde ab" '"")))
            (assert (equal '"abcde" (re-replace 't 'T '"abcde" '"")))
            (assert (equal '"Abcde Abcde Ab" (re-replace 'a 'A '"abcde abcde ab" '"g"))))
))

(assert (equal 'a (char-at 'abcdefg 0)))
(assert (equal 'g (char-at 'abcdefg 6)))
(assert (equal 'c (char-at 'abcdefg 2)))

(assert (< (strcmp 'ab 'cd) 0))
(assert (> (strcmp 'cd 'ab) 0))
(assert (= (strcmp 'ab 'ab) 0))

(assert (not (end-with 'abc 'abcd)))
(assert (not (end-with '"" 'ab)))
(assert (not (end-with 'abc '"")))
(assert (not (end-with 'abcde 'ed)))
(assert (end-with 'abcde 'abcde))
(assert (end-with 'abcde 'cde))
(assert (end-with 'abcde 'e))

(assert (not (start-with 'abc 'abcd)))
(assert (not (start-with '"" 'ab)))
(assert (not (start-with 'abc '"")))
(assert (not (start-with 'abcde 'ed)))
(assert (not (start-with 'abcde 'ab 1)))
(assert (not (start-with 'abcde 'ab 5)))
(assert (not (start-with 'abcde 'b -2)))
(assert (start-with 'abcde 'abcde))
(assert (start-with 'abcde 'abc))
(assert (start-with 'abcde 'a))
(assert (start-with 'abcde 'a 0))
(assert (not (start-with 'abcde 'a -1)))
(assert (start-with 'abcde 'cd 2))

(assert (equal '() (index-of 'abcdeabcde '"")))
(assert (equal '() (index-of 'abcdeabcde 'abcdefabcdef)))
(assert (equal '() (index-of '"" '"")))
(assert (equal '() (index-of '"" 'abc)))
(assert (equal 0 (index-of 'abcdeabcde 'a)))
(assert (equal 0 (index-of 'abcdeabcde 'abcdeabcde)))
(assert (equal 0 (index-of 'abcdeabcde 'abc)))
(assert (equal 2 (index-of 'abcdeabcde 'cde)))
(assert (equal '() (index-of 'abcdeabcde 'tt)))
(assert (equal 2 (index-of 'abcdeabcde 'cd)))
(assert (equal 2 (index-of 'abcdeabcde 'cd 2)))
(assert (equal 7 (index-of 'abcdeabcde 'cd 3)))
(assert (equal 7 (index-of 'abcdeabcde 'cd 7)))
(assert (equal '() (index-of 'abcdeabcde 'cd 8)))

(assert (equal '() (last-index-of 'abcdeabcde '"")))
(assert (equal '() (last-index-of 'abcdeabcde 'abcdefabcdef)))
(assert (equal '() (last-index-of '"" '"")))
(assert (equal '() (last-index-of '"" 'abc)))
(assert (equal 5 (last-index-of 'abcdeabcde 'a)))
(assert (equal 5 (last-index-of 'abcdeabcde 'abc)))
(assert (equal 0 (last-index-of 'abcdeabcde 'abcdeabcde)))
(assert (equal '() (last-index-of 'abcdeabcde 'tt)))
(assert (equal 5 (last-index-of 'abcdeabcde 'a 5)))
(assert (equal 0 (last-index-of 'abcdeabcde 'a 4)))

(assert (equal '1234512345 (replace 'abcdeabcde 'abcde '12345)))
(assert (equal 'abcdeabcde (replace 'abcdeabcde '"" '12345)))
(assert (equal 'abcdeabcde (replace 'abcdeabcde '"" '"")))
(assert (equal 'dede (replace 'abcdeabcde 'abc '"")))
(assert (equal '12345 (replace 'abcdeabcde 'abcdeabcde '12345)))

(assert (equal 'abcdeabcde (substring 'abcdeabcde 0)))
(assert (equal 'abcdeabcde (substring 'abcdeabcde -3)))
(assert (equal 'abcde (substring 'abcdeabcde 5)))
(assert (equal '"" (substring 'abcdeabcde 100)))
(assert (equal '"" (substring 'abcdeabcde 6 3)))
(assert (equal '"" (substring 'abcdeabcde 0 0)))
(assert (equal 'a (substring 'abcdeabcde 0 1)))
(assert (equal 'e (substring 'abcdeabcde 9 10)))
(assert (equal 'cd (substring 'abcdeabcde 7 9)))
(assert (equal 'ab (substring 'abcdeabcde 0 2)))
(assert (equal 'cde (substring 'abcdeabcde 2 5)))

(assert (equal 'abc12de (to-lower-case 'abC12De)))
(assert (equal 'ABC12DE (to-upper-case 'abC12De)))

(assert (equal 'abc  (trim 'abc)))
(assert (equal 'abc  (trim '"  abc")))
(assert (equal 'abc  (trim '"  abc   ")))
(assert (equal '""  (trim '"     ")))

(unset 'exts)
(unset 'extlns)

;=============================
; Test Binary
;=============================
(assert (equal 'aaa (to-string (to-bin 'aaa))))
(assert (equal 3 (binlen (to-bin 'aaa))))
(assert (equal 'cdefg (to-string (subbin (to-bin 'abcdefg) 2))))
(assert (equal 'cde (to-string (subbin (to-bin 'abcdefg) 2 5))))
(print (bin-human-read (to-bin '123)))
(assert (equal (concat-bin 'a 'b (to-bin 'c)) (concat-bin 'a 'b 'c)))
(cond ( (not (set? '@@ANDROID-NDK@@)) (progn
    (assert (equal 0x0f (bin-to-num (to-bin 0x0f 1))))
    (assert (equal 0xabcde (bin-to-num (to-bin 0xabcde 3)))))))

;=============================
; Test System
;=============================
(print '"\n====== Start Testing 'system' =======\n")
(sh 'ls)
(print (sh '"echo abcd"))
(assert (equal '"abcd
" (sh '"echo abcd")))
(assert (setenv 'EnvTest 'hahaha))
(assert (equal 'hahaha (getenv 'EnvTest)))
(assert (equal '"01234567890123456789012345678901234567890123456789
"            (sh '"echo 01234567890123456789012345678901234567890123456789")))
(assert (equal '"abcde
"            (sh '"echo abcde")))
(let ( (i 3) )
     (while (< 0 i)
         (print (sh '"echo hahahaha") '"\n")
         (set 'i (- i 1))))
(set 'exttfname '__________)
(sh (concat '"echo hahaha > " exttfname))
(assert (equal '"hahaha\n" (fread exttfname)))
(assert (equal '"hahaha\n" (to-string (freadb exttfname))))
(assert (equal (to-bin '"hahaha\n") (freadb exttfname)))
(sh (concat '"rm " exttfname))
(unset 'exttfname)

; ==================================
; In case of multi-threading mode, file state is unpredictable...
; (In single-threading mode, following test work well!)
; So, following auto test is not suitable for this script.
; But, codes are kept to reference in future.
; ==================================
;; fraw basic test - GC
;(set 'extfraw (fraw-open 'Makefile 'r))
;(assert (not (null extfraw)))
;(set 'extfrawfd (to-string (fraw-sysfd extfraw)))
;(set 'extfds (readdir '"/proc/self/fd"))
;; 'extfds' includes fd for directory '/proc/self/fd' itself.
;; So, last fd should be removed.(last fd is the one for directry!)
;(set 'extfds (reverse extfds))
;(set 'extfds (rest extfds))
;; check
;(assert (among extfrawfd extfds))
;; allocate new memory block to extfraw to trigger GC.
;(unset 'extfraw)
;(set 'extfraw (list 'a 'b 'c))
;; At this point, old 'extfraw' should be GCed and file should be closed!
;(set 'extfds (readdir '"/proc/self/fd"))
;; remove fd for directory itself!
;(set 'extfds (reverse extfds))
;(set 'extfds (rest extfds))
;(assert (not (among extfrawfd extfds)))
;(unset 'extfraw)
;(unset 'extfrawfd)
;(unset 'extfds)

(defun wait-ps (str)
"
"
    (let ((try 100) (cmd '()))
        (set 'cmd (concat '"ps -e | grep " str))
        (while (< 0 try)
            (cond
                ((< 0 (strlen (sh cmd))) (set 'try -1))
                ('t (progn (usleep 100000) (-- try)))))
        (assert (< try 0))))

; ** Test for procia-xxxx
; 'procia-xxx' is very high level tool function.
; So, make it be stable against lots of unexpected case is very difficult.
(cond ((set? 'procia-create) (progn
    (set 'extstr '"")
    (set 'extpia (procia-create './__procia_test '1 'a 'ha))
    (wait-ps '__procia_test)
    (assert (equal '"1/a/ha/\n" (to-string (fraw-read (procia-rfd extpia)))))
    (fraw-write (procia-wfd extpia) (to-bin '"procia test\n"))
    (assert (equal '"procia test\n" (to-string (fraw-read (procia-rfd extpia)))))
    (procia-destroy extpia)
    (assert (equal 0 (strlen (sh '"ps -e | grep __procia_test"))))

    (set 'extpia (procia-create './__procia_test '1 'a 'ha))
    (wait-ps '__procia_test)
    (assert (equal '"1/a/ha/\n" (procia-read extpia 0)))
    (procia-write extpia '"procia test\n")
    (assert (equal '"procia test\n" (procia-read extpia 0)))
    (procia-destroy extpia)
    (assert (equal 0 (strlen (sh '"ps -e | grep __procia_test"))))

    ; read timeout test.
    (let ( (pia '()) (sr '()) )
        (set 'pia (procia-create './__procia_test '1 'a 'ha))
        (wait-ps '__procia_test)
        ; remove first starting message of __procia_test
        (procia-read pia 0)

        (procia-write pia '"procia test\n")
        (set 'sr (procia-read pia 1000))
        (assert (equal '"procia test\n" sr))

        (procia-write pia '"procia test\n")
        (set 'sr (procia-read pia 1))
        (assert (null sr))

        (procia-destroy pia))

    ; ** Test GC of procia-xxxx
    (set 'extpia (procia-create './__procia_test '1 'a 'ha))
    (wait-ps '__procia_test)
    (unset 'extpia)
    ; trigger GC by newly using memory block
    (set 'extpia (list 'a 'b 'c))
    ; Now object created by 'procia-create' should be GCed.
    ; So, child process should not exist!!
    (assert (equal 0 (strlen (sh '"ps -e | grep __procia_test"))))
    (unset 'extstr)
    (unset 'extpia)
)))

;=============================
; Test Pair Operation
;=============================
(set 'extmap '())
(assert (equal 0 (length extmap)))
(set 'extmap (pr+ extmap 'a 'A))
(assert (equal '((a A)) extmap))
(assert (equal 1 (length extmap)))
(set 'extmap (pr+ extmap 'b 'B))
(assert (equal '((b B) (a A)) extmap))
(assert (equal 2 (length extmap)))
(set 'extmap (pr+ extmap '(a) '(A)))
(assert (equal '(((a) (A)) (b B) (a A)) extmap))
(assert (equal 3 (length extmap)))

(assert (not (equal '() (pr? extmap 'a))))
(assert (not (equal '() (pr? extmap '(a)))))
(assert (equal '() (pr? extmap '())))
(assert (equal '() (pr? extmap '(a b))))
(assert (equal '() (pr? extmap 88)))

(assert (equal 'B (pr* extmap 'b)))
(assert (equal '() (pr* extmap 'T)))
(assert (equal '(A) (pr* extmap '(a))))

(set 'extmap (pr- extmap 'b))
(assert (equal '(((a) (A)) (a A)) extmap))
(set 'extmap (pr- extmap 'a))
(assert (equal '(((a) (A))) extmap))
(set 'extmap (pr- extmap '(a)))
(assert (equal '() extmap))
(assert (equal '() '()))
(print (pr-from-list '() '(a b c) '()) '"\n")
(assert (equal '((c ()) (b ()) (a ())) (pr-from-list '() '(a b c) '())))

;=============================
; Test Etc
;=============================
(set 'extlst '(4 2 3 1 5))
(assert (equal '(5 4 3 2 1) (bsort > extlst)))
(assert (equal '(1 2 3 4 5) (bsort < extlst)))

(set 'extlst '(ab cd ef gh))
(assert (equal '(ab cd ef gh) (bsort < extlst)))
(assert (equal '(gh ef cd ab) (bsort > extlst)))

(unset 'extlst)

;=============================
; Test crc
;=============================
(print (crc (to-bin '"This is crc test string\n")))


;=============================
; Test Map
;=============================
; test about struct map interface...
(set 'exttr0 (make-trie-map '()))
(assert (equal '() (map* exttr0 'a))) ; access to inalid slot.
(set 'exttr0 (make-trie-map '((ab 12) (cd 34) (ef 56))))
(set 'exttr1 (make-trie-map '((rs '()) (tu 'name) (vw 100) )))
(assert (equal 12 (map* exttr0 'ab)))
(map+ exttr0 'ab 50)
(assert (equal 50 (map* exttr0 'ab)))
(map+ exttr0 'gh)
(assert (equal '() (map* exttr0 'gh)))
(map+ exttr0 'ij 90)
(assert (equal 90 (map* exttr0 'ij)))
(assert (equal 't (map- exttr0 'gh)))
(assert (equal '() (map- exttr0 'gh)))
(assert (equal 56 (map* exttr0 'ef)))
(assert (equal 'name (map* exttr1 'tu)))
(map+ exttr0 'ef exttr1)
(assert (equal 100 (map* (map* exttr0 'ef) 'vw)))

; -- & equal
(set 'exttr0 (make-trie-map '((ab 12) (cd 34) (ef 56))))
(set 'exttr1 (make-trie-map '((ab 12) (cd 34) (ef 56))))
(assert (equal exttr0 exttr1))

(unset 'exttr0)
(unset 'exttr1)

; test about struct map interface...
(set 'exth0 (make-hash-map '()))
(assert (equal '() (map* exth0 'a))) ; access to inalid slot.
(set 'exth0 (make-hash-map '((ab 12) (cd 34) (ef 56))))
(set 'exth1 (make-hash-map '((rs '()) (tu 'name) (vw 100) )))
(assert (equal 12 (map* exth0 'ab)))
(map+ exth0 'ab 50)
(assert (equal 50 (map* exth0 'ab)))
(map+ exth0 'gh)
(assert (equal '() (map* exth0 'gh)))
(map+ exth0 'ij 90)
(assert (equal 90 (map* exth0 'ij)))
(assert (equal 't (map- exth0 'gh)))
(assert (equal '() (map- exth0 'gh)))
(assert (equal 56 (map* exth0 'ef)))
(assert (equal 'name (map* exth1 'tu)))
(map+ exth0 'ef exth1)
(assert (equal 100 (map* (map* exth0 'ef) 'vw)))

(unset 'exth0)
(unset 'exth1)

;=============================
; Test Array
;=============================
(set 'exti 0)
(set 'extj 0)
(set 'extk 0)

;-- set & unset
(set 'extar0 (make-array 10))
(unset 'extar0)


(set 'extar1 '())
(set 'extar0 (make-array 10))
(while (< exti 10)
    (arr+ extar0 exti exti)
    (++ exti))
(assert (equal 0 (arr* extar0 0)))
(assert (equal 5 (arr* extar0 5)))
(arr+ extar0 100 5)
(assert (equal 100 (arr* extar0 5)))
(set 'extar0 (make-array 10 10))
(set 'exti 0)
(while (< exti 10)
    (set 'extj 0)
    (while (< extj 10)
        (arr+ extar0 (+ (* 10 exti) extj) exti extj)
        (++ extj))
    (++ exti))
(assert (equal 0 (arr* extar0 0 0)))
(assert (equal 5 (arr* extar0 0 5)))
(assert (equal 10 (arr* extar0 1 0)))
(assert (equal 23 (arr* extar0 2 3)))
(arr+ (arr* extar0 2) 1000 4)
(assert (equal 1000 (arr* extar0 2 4)))
(assert (equal 1000 (arr* (arr* extar0 2) 4)))
(set 'extar1 (make-array 100))
(set 'exti 0)
(while (< exti 100)
    (arr+ extar1 (+ 1000 exti) exti)
    (++ exti))
(arr+ extar0 extar1 1 1)
(assert (equal 1000 (arr* extar0 1 1 0)))
(assert (equal 1050 (arr* extar0 1 1 50)))
(arr+ extar0 11 1 1)
(assert (equal 11 (arr* extar0 1 1)))
(arr+ extar0 101 1 1)
(assert (equal 101 (arr* extar0 1 1)))

;-- Equal
(set 'extar0 (make-array 10 10))
(set 'exti 0)
(while (< exti 10)
    (set 'extj 0)
    (while (< extj 10)
        (arr+ extar0 (+ (* 10 exti) extj) exti extj)
        (++ extj))
    (++ exti))
(set 'extar1 (make-array 10 10))
(set 'exti 0)
(while (< exti 10)
    (set 'extj 0)
    (while (< extj 10)
        (arr+ extar1 (+ (* 10 exti) extj) exti extj)
        (++ extj))
    (++ exti))
(assert (equal extar0 extar1))
(assert (equal 0 (arr* extar0 0 0)))
(assert (equal 5 (arr* extar0 0 5)))
(assert (equal 10 (arr* extar0 1 0)))
(assert (equal 23 (arr* extar0 2 3)))


(unset 'exti)
(unset 'extj)
(unset 'extk)
(unset 'extar0)
(unset 'extar1)

;=============================
; Test Map & Array - Multi-thread
;=============================

;(print '"test script is not described yet!!!!!\n")
;(assert '())

; this is global array
(print '"Map & Array in multi-thread!!!\n")
(set 'extar0 (make-array 100))
(let ((i 0))
    (while (< i 100)
        (arr+ extar0 i i)
        (++ i)))

(create-thread '"
    (let ((i 0))
        (while (< i 100)
            (arr+ extar0 (+ i 1) i)
            (++ i)))")

(create-thread '"
    (let ((i 0))
        (while (< i 100)
            (arr+ extar0 (+ i 2) i)
            (++ i)))")

(create-thread '"
    (let ((i 0))
        (while (< i 100)
            (arr+ extar0 (+ i 3) i)
            (++ i)))")

(let ((i 0))
    (while (< i 100)
        (print i '" : " (arr* extar0 i) '"\n")
        (++ i)))


;=============================
; Test Struct (Map Based)
;=============================
(defstruct person (name sex))

(set 'extme (make-person))
(person.name+ extme 'cho)
(assert (equal 'cho (person.name* extme)))
(person.sex+  extme 'male)
(assert (equal 'male (person.sex* extme)))

(set 'extyou (make-person))
(person.name+ extyou 'cho)
(person.sex+  extyou 'male)

(print extme '"\n")
(print extyou '"\n")
(print '--- (person.name* extme) '--- '"\n")
(print '--- (person.name* extyou) '--- '"\n")
(print (equal extme extyou) '"\n")
(assert (equal 'cho (person.name* extyou)))
(assert (equal 'male (person.sex* extyou)))
(unset 'extyou)

(assert (equal 'cho (person.name* extme)))
(assert (equal 'male (person.sex* extme)))

(unset 'extme)

(undef-person)
(assert (not (set? 'make-pserson)))
(assert (not (set? 'person.name*)))
(assert (not (set? 'person.name+)))
(assert (not (set? 'person.sex*)))
(assert (not (set? 'person.sex+)))



(defstruct anim (name class nr-leg))
(set 'my (make-anim))
(anim.name+ my 'joe)
(anim.class+ my 'dog)
(anim.nr-leg+ my 4)
(anim.name+ my 'wow)
(assert (equal 'wow (anim.name* my)))
(assert (equal 4 (anim.nr-leg* my)))

(undef-anim)
(assert (not (set? 'make-anim)))
(assert (not (set? 'anim.name*)))
(assert (not (set? 'anim.name+)))

(unset 'extmap)

;=============================
; Test Type Checking
;=============================
(assert (bintype? (to-bin 'a)))
(assert (arrtype? (make-array 0)))
(assert (maptype? (make-trie-map '())))

(assert (equal 3 (length2 (to-bin 'aaa))))


;=============================
; Test System + MT
;=============================
(set 'extff '__________ff)
(sh (concat '"mknod " extff '" p"))
(create-thread '"
    (tset 'fd (fraw-open extff 'w))
    (usleep 100000)
    (fraw-write fd (to-bin 'haha))
    (fraw-close fd)")
(set 'extfd (fraw-open extff 'r))
(assert (not (null (fraw-rselect extfd 1000))))
(assert (equal (to-bin '"haha") (fraw-read extfd)))
(fraw-close extfd)
(usleep 50000); to wait for child thread to be finished.
(sh (concat '"rm " extff))
(unset 'extfd)
(unset 'extff)

;=============================
; Test Per-thread symbol
;=============================
(print '"\n>>> Test Per-Thread Symbols!\n")
(tset 'mytsym0 'haha)
(assert (not (set? 'mytsym0)))
(assert (tset? 'mytsym0))
(create-thread '"
    (let ( (t 'a) )
        (assert (not (set? 'mytsym0)))
        (assert (not (tset? 'mytsym0)))
        ; set global symbol
        (set 'exttsym0 1)
        ; override with per-thread symbol
        (tset 'exttsym0 2)
        ; local symbol should be chaged
        (tset 't 10)
        (assert (not (tset? 't)))
        ; temporal per-thread symbol
        (tset 'perthd 100)
        (assert (equal 10 t))
        (assert (equal 2 exttsym0)))
        ; wait
        (sleep 2) ")
(sleep 1)
(assert (not (set? 'perthd)))
(assert (not (tset? 'perthd)))
(assert (set? 'exttsym0))
(assert (not (tset? 'exttsym0)))
(unset 'exttsym0)

(assert (tset? 'mytsym0))
(tunset 'mytsym0)
(assert (not (tset? 'mytsym0)))
(sleep 2)
(print '"\n>>> Per-Thread Symbol Test PASSED!!\n")
