(print '"====== Start Testing 'ext' ======\n")

;=============================
; Test Pair Operation
;=============================
(set 'map '())
(assert (equal 0 (length map)))
(set 'map (pr+ map 'a 'A))
(assert (equal '((a A)) map))
(assert (equal 1 (length map)))
(set 'map (pr+ map 'b 'B))
(assert (equal '((b B) (a A)) map))
(assert (equal 2 (length map)))
(set 'map (pr+ map '(a) '(A)))
(assert (equal '(((a) (A)) (b B) (a A)) map))
(assert (equal 3 (length map)))

(assert (not (equal '() (pr? map 'a))))
(assert (not (equal '() (pr? map '(a)))))
(assert (equal '() (pr? map '())))
(assert (equal '() (pr? map '(a b))))
(assert (equal '() (pr? map 88)))

(assert (equal 'B (pr* map 'b)))
(assert (equal '() (pr* map 'T)))
(assert (equal '(A) (pr* map '(a))))

(set 'map (pr- map 'b))
(assert (equal '(((a) (A)) (a A)) map))
(set 'map (pr- map 'a))
(assert (equal '(((a) (A))) map))
(set 'map (pr- map '(a)))
(assert (equal '() map))
(assert (equal '() '()))
(print (pr-from-list '() '(a b c) '()) '"\n")
(assert (equal '((c ()) (b ()) (a ())) (pr-from-list '() '(a b c) '())))

;=============================
; Test Trie
;=============================
; test about struct trie interface...
(set 'tr0 (trie-create '((ab 12) (cd 34) (ef 56))))
(set 'tr1 (trie-create '((rs '()) (tu 'name) (vw 100) )))
(assert (equal 12 (trie-get tr0 'ab)))
(trie-insert tr0 'ab 50)
(assert (equal 50 (trie-get tr0 'ab)))
(trie-insert tr0 'gh)
(assert (equal '() (trie-get tr0 'gh)))
(trie-insert tr0 'ij 90)
(assert (equal 90 (trie-get tr0 'ij)))
(assert (equal 't (trie-del tr0 'gh)))
(assert (equal '() (trie-del tr0 'gh)))
(assert (equal 56 (trie-get tr0 'ef)))
(assert (equal 'name (trie-get tr1 'tu)))
(trie-insert tr0 'ef tr1)
(assert (equal 100 (trie-get (trie-get tr0 'ef) 'vw)))

; -- & equal
(set 'tr0 (trie-create '((ab 12) (cd 34) (ef 56))))
(set 'tr1 (trie-create '((ab 12) (cd 34) (ef 56))))
(assert (equal tr0 tr1))

(unset 'tr0)
(unset 'tr1)

;=============================
; Test Array
;=============================
(set 'i 0)
(set 'j 0)
(set 'k 0)

;-- set & unset
(set 'ar0 (arr-create 10))
(unset 'ar0)


(set 'ar1 '())
(set 'ar0 (arr-create 10))
(while (< i 10)
    (arr-set ar0 i i)
    (++ i))
(assert (equal 0 (arr-get ar0 0)))
(assert (equal 5 (arr-get ar0 5)))
(arr-set ar0 100 5)
(assert (equal 100 (arr-get ar0 5)))
(set 'ar0 (arr-create 10 10))
(set 'i 0)
(while (< i 10)
    (set 'j 0)
    (while (< j 10)
        (arr-set ar0 (+ (* 10 i) j) i j)
        (++ j))
    (++ i))
(assert (equal 0 (arr-get ar0 0 0)))
(assert (equal 5 (arr-get ar0 0 5)))
(assert (equal 10 (arr-get ar0 1 0)))
(assert (equal 23 (arr-get ar0 2 3)))
(arr-set (arr-get ar0 2) 1000 4)
(assert (equal 1000 (arr-get ar0 2 4)))
(assert (equal 1000 (arr-get (arr-get ar0 2) 4)))
(set 'ar1 (arr-create 100))
(set 'i 0)
(while (< i 100)
    (arr-set ar1 (+ 1000 i) i)
    (++ i))
(arr-set ar0 ar1 1 1)
(assert (equal 1000 (arr-get ar0 1 1 0)))
(assert (equal 1050 (arr-get ar0 1 1 50)))
(arr-set ar0 11 1 1)
(assert (equal 11 (arr-get ar0 1 1)))
(aset ar0 101 1 1)
(assert (equal 101 (aref ar0 1 1)))

;-- Equal
(set 'ar0 (arr-create 10 10))
(set 'i 0)
(while (< i 10)
    (set 'j 0)
    (while (< j 10)
        (arr-set ar0 (+ (* 10 i) j) i j)
        (++ j))
    (++ i))
(set 'ar1 (arr-create 10 10))
(set 'i 0)
(while (< i 10)
    (set 'j 0)
    (while (< j 10)
        (arr-set ar1 (+ (* 10 i) j) i j)
        (++ j))
    (++ i))
(assert (equal ar0 ar1))
(assert (equal 0 (arr-get ar0 0 0)))
(assert (equal 5 (arr-get ar0 0 5)))
(assert (equal 10 (arr-get ar0 1 0)))
(assert (equal 23 (arr-get ar0 2 3)))


(unset 'i)
(unset 'j)
(unset 'k)
(unset 'ar0)
(unset 'ar1)

;=============================
; Test Struct (Trie Based)
;=============================
(defstruct person (name sex))

(set 'me (make-person))
(person.name+ me 'cho)
(assert (equal 'cho (person.name* me)))
(person.sex+  me 'male)
(assert (equal 'male (person.sex* me)))

(set 'you (make-person))
(person.name+ you 'cho)
(person.sex+  you 'male)

(print me '"\n")
(print you '"\n")
(print '--- (person.name* me) '--- '"\n")
(print '--- (person.name* you) '--- '"\n")
(print (equal me you) '"\n")
(assert (equal 'cho (person.name* you)))
(assert (equal 'male (person.sex* you)))
(unset 'you)

(assert (equal 'cho (person.name* me)))
(assert (equal 'male (person.sex* me)))

(undef-person)
(assert (not (is-set 'make-pserson)))
(assert (not (is-set 'person.name*)))
(assert (not (is-set 'person.name+)))
(assert (not (is-set 'person.sex*)))
(assert (not (is-set 'person.sex+)))



(defstruct anim (name class nr-leg))
(set 'my (make-anim))
(anim.name+ my 'joe)
(anim.class+ my 'dog)
(anim.nr-leg+ my 4)
(anim.name+ my 'wow)
(assert (equal 'wow (anim.name* my)))
(assert (equal 4 (anim.nr-leg* my)))

(undef-anim)
(assert (not (is-set 'make-anim)))
(assert (not (is-set 'anim.name*)))
(assert (not (is-set 'anim.name+)))

(unset 'map)
