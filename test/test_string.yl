(print '"====== Start Testing 'string' =======\n")
(assert (equal 5 (s.length 'abcde)))
(set 'x 10.98)
(assert (equal '10 (s.itos x)))
(assert (equal '10.980000 (s.dtos x)))
(set 'lns (s.split-to-line '"123\n\n7890\nabcd"))
(assert (equal '123 (car lns)))
(assert (equal 0 (s.length (cadr lns))))
(assert (equal '7890 (caddr lns)))
(assert (equal 'abcd (car (cdddr lns))))

; test pcre if possible!
(cond ((is-set 's.re-match)
        (let ((R '()))
            (set 'R (s.re-match '"([0-9]+)([a-z]+)\\s" '"  hahah 12abc123abcd effff" '""))
            (assert (equal '"123abcd " (car R)))
            (assert (equal '123 (cadr R)))
            (assert (equal 'abcd (caddr R)))
            (set 'R (s.re-match '"^([0-9]+)([a-z]+)" '"123aBcD fff" '"i"))
            (assert (equal '123aBcD (car R))))))

(cond ((is-set 's.re-replace)
        (let ((R '()) (subj '"hahaha my name is cho!"))
            (set 'R (s.re-replace '"name" '"full name" subj '""))
            (assert (equal R '"hahaha my full name is cho!"))
            (assert (equal '"Abcde abcde ab" (s.re-replace 'a 'A '"abcde abcde ab" '"")))
            (assert (equal '"abcde" (s.re-replace 't 'T '"abcde" '"")))
            (assert (equal '"Abcde Abcde Ab" (s.re-replace 'a 'A '"abcde abcde ab" '"g"))))))

(assert (equal 'a (s.at 'abcdefg 0)))
(assert (equal 'g (s.at 'abcdefg 6)))
(assert (equal 'c (s.at 'abcdefg 2)))

(assert (< (s.compare 'ab 'cd) 0))
(assert (> (s.compare 'cd 'ab) 0))
(assert (= (s.compare 'ab 'ab) 0))

(assert (not (s.end-with 'abc 'abcd)))
(assert (not (s.end-with '"" 'ab)))
(assert (not (s.end-with 'abc '"")))
(assert (not (s.end-with 'abcde 'ed)))
(assert (s.end-with 'abcde 'abcde))
(assert (s.end-with 'abcde 'cde))
(assert (s.end-with 'abcde 'e))

(assert (not (s.start-with 'abc 'abcd)))
(assert (not (s.start-with '"" 'ab)))
(assert (not (s.start-with 'abc '"")))
(assert (not (s.start-with 'abcde 'ed)))
(assert (not (s.start-with 'abcde 'ab 1)))
(assert (not (s.start-with 'abcde 'ab 5)))
(assert (not (s.start-with 'abcde 'b -2)))
(assert (s.start-with 'abcde 'abcde))
(assert (s.start-with 'abcde 'abc))
(assert (s.start-with 'abcde 'a))
(assert (s.start-with 'abcde 'a 0))
(assert (not (s.start-with 'abcde 'a -1)))
(assert (s.start-with 'abcde 'cd 2))

(assert (equal '() (s.index-of 'abcdeabcde '"")))
(assert (equal '() (s.index-of 'abcdeabcde 'abcdefabcdef)))
(assert (equal '() (s.index-of '"" '"")))
(assert (equal '() (s.index-of '"" 'abc)))
(assert (equal 0 (s.index-of 'abcdeabcde 'a)))
(assert (equal 0 (s.index-of 'abcdeabcde 'abcdeabcde)))
(assert (equal 0 (s.index-of 'abcdeabcde 'abc)))
(assert (equal 2 (s.index-of 'abcdeabcde 'cde)))
(assert (equal '() (s.index-of 'abcdeabcde 'tt)))
(assert (equal 2 (s.index-of 'abcdeabcde 'cd)))
(assert (equal 2 (s.index-of 'abcdeabcde 'cd 2)))
(assert (equal 7 (s.index-of 'abcdeabcde 'cd 3)))
(assert (equal 7 (s.index-of 'abcdeabcde 'cd 7)))
(assert (equal '() (s.index-of 'abcdeabcde 'cd 8)))

(assert (equal '() (s.last-index-of 'abcdeabcde '"")))
(assert (equal '() (s.last-index-of 'abcdeabcde 'abcdefabcdef)))
(assert (equal '() (s.last-index-of '"" '"")))
(assert (equal '() (s.last-index-of '"" 'abc)))
(assert (equal 5 (s.last-index-of 'abcdeabcde 'a)))
(assert (equal 5 (s.last-index-of 'abcdeabcde 'abc)))
(assert (equal 0 (s.last-index-of 'abcdeabcde 'abcdeabcde)))
(assert (equal '() (s.last-index-of 'abcdeabcde 'tt)))
(assert (equal 5 (s.last-index-of 'abcdeabcde 'a 5)))
(assert (equal 0 (s.last-index-of 'abcdeabcde 'a 4)))

(assert (equal '1234512345 (s.replace 'abcdeabcde 'abcde '12345)))
(assert (equal 'abcdeabcde (s.replace 'abcdeabcde '"" '12345)))
(assert (equal 'abcdeabcde (s.replace 'abcdeabcde '"" '"")))
(assert (equal 'dede (s.replace 'abcdeabcde 'abc '"")))
(assert (equal '12345 (s.replace 'abcdeabcde 'abcdeabcde '12345)))

(assert (equal 'abcdeabcde (s.substring 'abcdeabcde 0)))
(assert (equal 'abcdeabcde (s.substring 'abcdeabcde -3)))
(assert (equal 'abcde (s.substring 'abcdeabcde 5)))
(assert (equal '"" (s.substring 'abcdeabcde 100)))
(assert (equal '"" (s.substring 'abcdeabcde 6 3)))
(assert (equal '"" (s.substring 'abcdeabcde 0 0)))
(assert (equal 'a (s.substring 'abcdeabcde 0 1)))
(assert (equal 'e (s.substring 'abcdeabcde 9 10)))
(assert (equal 'cd (s.substring 'abcdeabcde 7 9)))
(assert (equal 'ab (s.substring 'abcdeabcde 0 2)))
(assert (equal 'cde (s.substring 'abcdeabcde 2 5)))

(assert (equal 'abc12de (s.to-lower-case 'abC12De)))
(assert (equal 'ABC12DE (s.to-upper-case 'abC12De)))

(assert (equal 'abc  (s.trim 'abc)))
(assert (equal 'abc  (s.trim '"  abc")))
(assert (equal 'abc  (s.trim '"  abc   ")))
(assert (equal '""  (s.trim '"     ")))

(unset 'x)
(unset 'lns)
