top="$(CURDIR)"/




TARGET=$(OUTDIR)ylcon
LIB=lib$(TARGET).a
PUB_HEADER=

INCLUDES=-I../include

EXTLIB_DIR=../lib/
EXT_LIBRARY=ylisp
EXTLIB=$(addprefix $(EXTLIB_DIR),$(addsuffix .a,$(addprefix lib,$(EXT_LIBRARY))))

SOURCES= main.c

OBJ=$(subst .c,.o, $(addprefix $(OUTDIR),$(SOURCES))) 
DEP_FILES=$(subst .c,.P, $(addprefix $(DEPDIR),$(SOURCES)))

CFLAGS+=
# temp block... no lib to link
LDFLAGS+= -rdynamic -ldl -lpthread
#LDFLAGS+=-L$(EXTLIB_DIR) -l$(EXT_LIBRARY)
#LDFLAGS+= -ldl

# Target name of dependency file generated by GCC, is just xxx.o
# So, we need post processing to handle it properly.
# To avoid this overhead... we don't use output directory.!
OUTDIR=
CC=gcc
C_COMPILE=$(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
C_DEPENDENCIES=-Wp,-MD,$(DEPDIR)$(*F).P
C_LINK=$(CC) $(CFLAGS) $(LDFLAGS) -L.
AR=ar
AR_CMD=$(AR) cr
VERSION=1.0

DISTDIR=$(top)$(shell basename $(top))-$(VERSION)
DEPDIR=.deps/

debug: $(TARGET)

release: $(TARGET)

DEPS_MAGIC := $(shell mkdir $(DEPDIR) $(OUTDIR) > /dev/null 2>&1 || :)

# simply ignore file which doesn't exist. (At first these files don't exist..)
-include $(DEP_FILES)

$(OUTDIR)%.o: %.c 
	@echo '$(C_COMPILE) -o $@ -c $<'; \
	$(C_COMPILE) $(C_DEPENDENCIES) -o $@ -c $<

$(TARGET): $(OBJ) $(EXTLIB)
	@echo '$(C_LINK) -o $@ $^'; \
	$(C_LINK) -o $@ $^


tags: 


clean:
	rm -f *.mod *.o *.obj .lo $(TARGET) $(LIB)
	rm -rf $(DEPDIR)
	rm -rf $(OUTDIR)

.PHONY: dist

dist:
	rm -rf $(DISTDIR)
	mkdir $(DISTDIR)
	cp $(SOURCES) $(DISTDIR)
	tar -cvzf $(DISTDIR).tar.gz $(DISTDIR)
	rm -rf $(DISTDIR)

# End of Makefile
